# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Name of the session to save by default. If this is set to null, the
# session which was last loaded is saved.
# Type: SessionName
c.session.default_name = 'lastSession.qt'

# Load a restored tab as soon as it takes focus.
# Type: Bool
c.session.lazy_restore = True

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
c.content.local_content_can_access_remote_urls = True

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications', False, 'https://www.reddit.com')

# Directory to save downloads to. If unset, a sensible OS-specific
# default is used.
# Type: Directory
c.downloads.location.directory = '~/Downloads'

# Default program used to open downloads. If null, the default internal
# handler is used. Any `{}` in the string will be expanded to the
# filename, else the filename will be appended.
# Type: String
c.downloads.open_dispatcher = None

# Characters used for hint strings.
# Type: UniqueCharString
c.hints.chars = 'asdwerxcv'

# Open new tabs (middleclick/ctrl+click) in the background.
# Type: Bool
c.tabs.background = True

# Position of new tabs which are not opened from another tab. See
# `tabs.new_position.stacking` for controlling stacking behavior.
# Type: NewTabPosition
# Valid values:
#   - prev: Before the current tab.
#   - next: After the current tab.
#   - first: At the beginning.
#   - last: At the end.
c.tabs.new_position.unrelated = 'next'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
c.fonts.monospace = '"xos4 Terminus", Terminus, Monospace, "DejaVu Sans Mono", Monaco, "Bitstream Vera Sans Mono", "Andale Mono", "Courier New", Courier, "Liberation Mono", monospace, Fixed, Consolas, Terminal'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '12pt dejavu sans mono'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold 13pt dejavu sans mono'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '13pt dejavu sans mono'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '13pt dejavu sans mono'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 14pt dejavu sans mono'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '14pt dejavu sans mono'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '13pt dejavu sans mono'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '13pt dejavu sans mono'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '13pt dejavu sans mono'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '11pt dejavu sans mono'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '11pt dejavu sans mono'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '12pt dejavu sans mono'

# Bindings for normal mode
config.bind('1', 'tab-close')
config.bind('2', 'save')
config.bind('<Alt+[>', 'tab-prev')
config.bind('<Alt+]>', 'tab-next')
config.bind('<Alt+b>', 'tab-prev')
config.bind('<Alt+f>', 'tab-next')
config.bind('<Alt+h>', 'tab-prev')
config.bind('<Alt+l>', 'tab-next')
config.bind('<Ctrl++>', 'zoom-in')
config.bind('<Ctrl+->', 'zoom-out')
config.bind('<Ctrl+2>', 'save')
config.bind('<Ctrl+h>', 'tab-prev')
config.bind('<Ctrl+i>', 'forward')
config.bind('<Ctrl+j>', 'move-to-next-line')
config.bind('<Ctrl+l>', 'tab-next')
config.bind('<Ctrl+n>', None)
config.bind('<Ctrl+o>', 'back')
config.bind('<Ctrl+q>', 'tab-close')
config.bind('<Ctrl+v>', None)
config.bind('<Ctrl+w>', None)
config.bind('<Ctrl+w><Ctrl+o>', 'window-only')
config.bind('<Ctrl+w><Ctrl+t>', 'tab-give')
config.bind('<Ctrl+x>', None)
config.bind('<Ctrl+x><Ctrl+h>', 'tab-prev')
config.bind('<Ctrl+x><Ctrl+l>', 'tab-next')
config.bind('<Space>1', 'tab-close')
config.bind('<Space>2', 'save')
config.bind('<Space>p', 'session-load LastSession.qt')
config.bind('<Space>q', 'tab-close')
config.bind('<Space>w', 'save')
config.bind('<Space>z', 'session-save LastSession.qt')
config.bind('D', None)
config.bind('H', None)
config.bind('J', None)
config.bind('K', None)
config.bind('L', None)
config.bind('U', 'undo')
config.bind('d', None)
config.bind('e', 'edit-url')
config.bind('gi', 'enter-mode insert')
config.bind('i', 'hint inputs --first')
config.bind('u', None)

# Bindings for caret mode
config.bind('b', 'move-to-prev-word', mode='caret')
config.bind('w', 'move-to-next-word', mode='caret')

# Bindings for command mode
config.bind('<Ctrl+j>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl+k>', 'completion-item-focus prev', mode='command')
config.bind('<Ctrl+n>', 'command-history-next', mode='command')
config.bind('<Ctrl+p>', 'command-history-prev', mode='command')
config.bind('<Alt+k>', 'leave-mode', mode='command')

# Bindings for insert mode
config.bind('<Ctrl+m>', 'follow-selected', mode='insert')
