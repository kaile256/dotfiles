global !p
def is_spec_file():
  return re.search(r'_spec\.lua$', vim.eval('@%'))


endglobal


context "is_spec_file()"
snippet 'd(:?e(:?s(:?cribe)?)?)?' "describe($1)" br
describe("${1:description}", function()
  ${2:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet it "it($1)" b
it("${1:description}", function()
  ${2:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet 'b(:?e(:?f(:?ore)?)?)?_?e(:?ach)?' "before_each($1)" br
before_each(function()
  ${3:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet 'a(:?f(:?t(:?er)?)?)?_e(:?ach)?' "after_each($1)" br
after_each(function()
  ${3:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet 'b(:?e(:?f(:?ore)?)?)?a(:?ll)?' "setup($1)" br
setup(function()
  ${3:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet 'a(:?f(:?t(:?er)?)?)?a(:?ll)?' "teardown($1)" br
teardown(function()
  ${3:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet setup "setup($1)" b
setup(function()
  ${3:${VISUAL}}
end)
endsnippet

context "is_spec_file()"
snippet teardown "teardown($1)" b
teardown(function()
  ${3:${VISUAL}}
end)
endsnippet
