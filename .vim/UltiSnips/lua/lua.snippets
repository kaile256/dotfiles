global !p
def insert_props_as_tabstops(ts, snip):
  snip.rv = ""
  args = map(lambda a: a.strip(), ts.split(','))
  args = list(filter(lambda a: a != 'self', args))

  snip >> 1
  for prop in args:
    if prop != "":
      snip += "self.%s = %s" % (prop, prop)

endglobal

snippet local "local $1 = $2" b
local $1 = $2
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "anonymous function" "'=' in snip.buffer[snip.line]" erw
function($1) ${2:${VISUAL}} end
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "includes ref to itself, equivalent to `local $1; $1 = function() $2 end`" "'=' not in snip.buffer[snip.line]" erw
function ${1:func}(${2:args})`!p

vtext = snip.v.text
if vtext == "":
  snip += ""
else :
  snip >> 1
  snip += vtext


`end
endsnippet

snippet '(?:local )?(:?function (:?= )?)?(\S+).new' "define Class.new()" br
local `!p
# These snippets for writing Class.new() are derived from the tutorial:
# http://lua-users.org/wiki/ObjectOrientationTutorial

cls = match.group(1)
snip.rv = cls + " = {}"
snip += cls + ".__index = " + cls
`
setmetatable(`!p snip.rv = cls`, {`!p
snip.rv = ""
if t[1] != "":
  snip.rv += "\n"
  snip.rv += " " * vim.options['shiftwidth']
  snip.rv += "__index = "
          `${1:InheritedClass}`!p snip.rv = "" if t[1] == "" else ","`
  __call = function(cls, ...)
    return cls.new(...)
  end,
})

`!p
snip.rv = cls
`.new = function(${2:args})
  local self = setmetatable(`!p
if t[1] == "":
  snip.rv = "{}"
  insert_props_as_tabstops(t[2], snip)
else :
  snip.rv = t[1] + ".new(" + t[2] + ")"
`, `!p snip.rv = cls`)`!p
`
  return self`!p

snip.rv = ""
`
end

return `!p
if not vim.eval("search('return " + t[1] + "\n*\%$', 'nW')"):
  snip.rv = cls
`
endsnippet

snippet 'local self' "Make a constructor" b
local self = setmetatable({}, ${1:M})
endsnippet
