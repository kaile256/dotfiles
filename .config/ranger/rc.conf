# Orig: /usr/share/doc/ranger/config/rc.conf

# For python code, create a plugin in "plugins/" or a command in "commands.py"
#
# Each line will be run before the user interface is initialized. As a result,
# you cannot use commands which rely on the UI such as :delete or :mark.

# Options: Global {{{1
# General {{{2
# viewmode:
#   miller: shows multiple levels of the hierarchy
#   multipane: multipane view showing all tabs next to each other
set viewmode miller

# How many columns are there, and what are their relative widths?
set column_ratios 1,3,4

# Warn at startup when $RANGER_LEVEL is greater than 0
# Available: true, false, error(warning outstandingly)
set nested_ranger_warning error

# Available: default, jungle, snow, solarized
set colorscheme default

# Turning this on makes sense for screen readers:
set show_cursor false

# hidden_filter: set in regular expression
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$
set show_hidden false

# keep so much spaces between top/bottom border
set scroll_offset 0

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Ask for a confirmation on "delete"
# Available: "always", "never", "multiple" (default)
# "multiple", asks only deleting multiple files at once.
set confirm_on_delete multiple

# Automatically count files in the directory, even before entering them?
set automatically_count_files true

# Open all images in cwd when running an image viewers like feh or sxiv
set open_all_images true

# VCS (Version Control Systems) {{{2
# Be aware of version control systems and display information.
set vcs_aware false
# Max length of commit messages to be shown in the statusbar.
set vcs_msg_length 50

# State of the four backends git, hg, bzr, svn.
# Available:
#   "disabled"
#   "enabled" (show local and remote information).
#   "local" (only show local info)
set vcs_backend_git enabled
set vcs_backend_hg  disabled
set vcs_backend_bzr disabled
set vcs_backend_svn disabled

# Preview {{{2
set preview_images     true
set use_preview_script true
# Padding on the right if no preview,
# which allows you to click into the space to run the file.
set padding_right true

# Max size in bytes. Set to 0 to disable this feature.
set preview_max_size 0

# Set a path to use non-default file preview script
# ranger ships with scope.sh, a script that calls external programs (see
# README.md for dependencies) to preview images, archives, etc.
#set preview_script ~/.config/ranger/scope.sh

# Set the preview image method. Supported methods:
#
# * w3m (default):
#   Preview images in full color with the external command "w3mimgpreview"?
#   This requires the console web browser "w3m" and a supported terminal.
#   It has been successfully tested with "xterm" and "urxvt" without tmux.
#
# * iterm2:
#   Preview images in full color using iTerm2 image previews
#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
#   with image preview support.
#
#   This feature relies on the dimensions of the terminal's font.  By default, a
#   width of 8 and height of 11 are used.  To use other values, set the options
#   iterm2_font_width and iterm2_font_height to the desired values.
#
# * terminology:
#   Previews images in full color in the terminology terminal emulator.
#   Supports a wide variety of formats, even vector graphics like svg.
#
# * urxvt:
#   Preview images in full color using urxvt image backgrounds. This
#   requires using urxvt compiled with pixbuf support.
#
# * urxvt-full:
#   The same as urxvt but utilizing not only the preview pane but the
#   whole terminal window.
#
# * kitty:
#   Preview images in full color using kitty image protocol.
#   Requires python PIL or pillow library.
#   If ranger does not share the local filesystem with kitty
#   the transfer method is changed to encode the whole image;
#   while slower, this allows remote previews,
#   for example during an ssh session.
#   Tmux is unsupported.
#
# * ueberzug:
#   Preview images in full color with the external command "ueberzug".
#   Images are shown by using a child window.
#   Only for users who run X11 in GNU/Linux.
set preview_images_method urxvt

# Delay in seconds before displaying an image with the w3m method.
# Increase it in case of experiencing display corruption.
set w3m_delay  0.02
# Manually adjust the w3mimg offset when using a terminal which needs this
set w3m_offset 0

# Default iTerm2 font size (see: preview_images_method: iterm2)
set iterm2_font_width  8
set iterm2_font_height 11

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# BIDI support - try to properly display file names in RTL languages (Hebrew, Arabic).
# Requires python-bidi pip package
set bidi_support false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Save the console history on exit?
set save_console_history true

# Draw borders around columns? (separators, outline, both, or none)
# Separators are vertical lines between columns.
# Outline draws a box around all the columns.
# Both combines the two.
set draw_borders true

set dirname_in_tabs true

set mouse_enabled true

# Status Bar & Column {{{2
# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar  true
set display_size_in_status_bar       true
# Display the free disk space in the status bar?
set display_free_space_in_status_bar true

# Display line numbers in main column
# Available: false, absolute, relative
set line_numbers false
# show the absolute line number in the current line if line_numbers=relative
set relative_current_zero false

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns      true
# Display the file size in the main column or status bar?
set display_size_in_main_column true

# Title {{{2
set update_title false
# Set the title to "ranger" in tmux
set update_tmux_title true
# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3
set hostname_in_titlebar true

# Abbreviate $HOME with ~ in titlebar (first line)
set tilde_in_titlebar false

# Add the highlighted file to the path in the titlebar
set show_selection_in_titlebar true

# History {{{2
# How many directory-changes or console-commands should be kept in history?
set max_history_size 20
set max_console_history_size 50

# Flush the input after each key hit?  (Noticeable when ranger lags)
set flushinput true

# Bookmarks {{{2
# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# Save the "`" bookmark to disk.  This can be used to switch to the last
# directory by typing "``".
set save_backtick_bookmark true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Sort {{{2
# One of: size, natural, basename, atime, ctime, mtime, type, random
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true
set sort_unicode true

# cd {{{2
# Whether to include bookmarks in cd command
set cd_bookmarks true

# Changes case sensitivity for the cd command tab completion
set cd_tab_case sensitive

# Use fuzzy tab completion with the "cd" command. For example,
# ":cd /u/lo/b<tab>" expands to ":cd /usr/local/bin".
set cd_tab_fuzzy true

# The key hint lists up to this size have their sublists expanded.
# Otherwise the submaps are replaced with "...".
set hint_collapse_threshold 10

# The delay that ranger idly waits for user input, in milliseconds, with a
# resolution of 100ms.  Lower delay reduces lag between directory updates but
# increases CPU load.
set idle_delay 2000

# Cache {{{2
# When the metadata manager module looks for metadata, should it only look for
# a ".metadata.json" file in the current directory, or do a deep search and
# check all directories above the current one as well?
set metadata_deep_search false

# Clear all existing filters when leaving a directory
set clear_filters_on_dir_change false

# Start line numbers from 1 instead of 0
set one_indexed false

# Save tabs on exit
set save_tabs_on_exit false

# Enable scroll wrapping - moving down while on the last item will wrap around to
# the top and vice versa.
set wrap_scroll false

# Set the global_inode_type_filter to nothing.  Possible options: d, f and l for
# directories, files and symlinks respectively.
set global_inode_type_filter

# This setting allows to freeze the list of files to save I/O bandwidth.  It
# should be 'false' during start-up, but you can toggle it by pressing F.
set freeze_files false

# show in bytes, or human-readable format
set size_in_bytes false

# Options: Local {{{1
# that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# Aliases in Console {{{1
alias e     edit
alias q     quit
alias q!    quit!
alias qa    quitall
alias qa!   quitall!
alias qall  quitall
alias qall! quitall!
alias setl  setlocal

alias filter     scout -prts
alias find       scout -aets
alias mark       scout -mr
alias unmark     scout -Mr
alias search     scout -rs
alias search_inc scout -rts
alias travel     scout -aefklst

# Keybindings: Browser {{{1
# Basic {{{2
map     Q quitall
map     ZQ quit

#map R     reload_cwd
map F     set freeze_files!
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal
map ~ set viewmode!

map i display_file
map <A-j> scroll_preview 1
map <A-k> scroll_preview -1
map ? help
map W display_log
map w taskview_open
map S shell $SHELL

map :  console
map ;  console
map !  console shell%space
map @  console -p6 shell  %%s
map #  console shell -p%space
map s  console shell%space
map r  chain draw_possible_programs; console open_with%%space
map f  console find%space
map cd console cd%space

map <C-p> chain console; eval fm.ui.console.history_move(-1)

# Change the line mode
map Mf linemode filename
map Mi linemode fileinfo
map Mm linemode mtime
map Mh linemode humanreadablemtime
map Mp linemode permissions
map Ms linemode sizemtime
map MH linemode sizehumanreadablemtime
map Mt linemode metatitle

# Tagging / Marking {{{2
map t       tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

# nostalgics: Midnight Commander bindings
map <F1> help
map <F2> rename_append
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir%space
map <F8> console delete
#map <F8> console trash
map <F10> exit

map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <CR>       move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <DELETE>   console delete
map <INSERT>   console touch%space

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map <c-d> move down=0.5 pages=True
map <c-u> move up=0.5   pages=True

# Jumping around
map <c-o>     history_go -1
map <c-i>     history_go 1

# move in parent directory
map ]     move_parent 1
map [     move_parent -1

map }     traverse
map {     traverse_backwards
map )     jump_non

map gh cd ~
map gr cd /
map g/ cd /
map ge cd /etc
map gu cd /usr
map gd cd /dev
map go cd /opt
map gv cd /var
map gm cd /media
map gp cd /proc
map gM cd /mnt
map gs cd /srv
map gp cd /tmp
map g? cd /usr/share/doc/ranger

map gl cd -r .
map gL cd -r %f

map gi eval fm.cd('/run/media/' + os.getenv('USER'))
map gR eval fm.cd(ranger.RANGERDIR)

# External Programs
map E  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp yank path
map yd yank dir
map yn yank name
map y. yank name_without_extension

# Filesystem Operations
map =  chmod

map cw console rename%space
map R  rename_append
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)

# Paste, Move & Copy {{{2
map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree
map pd console paste dest=
map p`<any> paste dest=%any_path
map p'<any> paste dest=%any_path

map dD console delete
map dT console trash

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle

# Temporary workarounds {{{2
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching {{{2
map /  console search%space
map zf console filter%space
map z/ console filter%space

map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Tabs {{{2
#map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new

map <C-w>n tab_new
map <C-w>c tab_close
map <C-w>q tab_close
map uq     tab_restore
map <C-w>u tab_restore

map <a-r> tab_shift 1
map <a-l> tab_shift -1
map <c-a> tab_shift 1
map <c-x> tab_shift -1

map <a-0>  tab_open 0
map <a-1>  tab_open 1
map <a-2>  tab_open 2
map <a-3>  tab_open 3
map <a-4>  tab_open 4
map <a-5>  tab_open 5
map <a-6>  tab_open 6
map <a-7>  tab_open 7
map <a-8>  tab_open 8
map <a-9>  tab_open 9
map <c-w>0 tab_open 0
map <c-w>1 tab_open 1
map <c-w>2 tab_open 2
map <c-w>3 tab_open 3
map <c-w>4 tab_open 4
map <c-w>5 tab_open 5
map <c-w>6 tab_open 6
map <c-w>7 tab_open 7
map <c-w>8 tab_open 8
map <c-w>9 tab_open 9

# Sorting {{{2
map <a-s>s set sort_reverse!
map <a-s>r set sort=random
map <a-s>z chain set sort=size;      set sort_reverse=False
map <a-s>b chain set sort=basename;  set sort_reverse=False
map <a-s>n chain set sort=natural;   set sort_reverse=False
map <a-s>m chain set sort=mtime;     set sort_reverse=False
map <a-s>c chain set sort=ctime;     set sort_reverse=False
map <a-s>a chain set sort=atime;     set sort_reverse=False
map <a-s>t chain set sort=type;      set sort_reverse=False
map <a-s>e chain set sort=extension; set sort_reverse=False

map <a-s>S chain set sort=size;      set sort_reverse=True
map <a-s>B chain set sort=basename;  set sort_reverse=True
map <a-s>N chain set sort=natural;   set sort_reverse=True
map <a-s>M chain set sort=mtime;     set sort_reverse=True
map <a-s>C chain set sort=ctime;     set sort_reverse=True
map <a-s>A chain set sort=atime;     set sort_reverse=True
map <a-s>T chain set sort=type;      set sort_reverse=True
map <a-s>E chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Toggle {{{2
map zc    set collapse_preview!
map zd    set sort_directories_first!

map zh    set show_hidden!
map z.    set show_hidden!

map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!

# Filter stack {{{2
map .n console filter_stack add name%space
map .m console filter_stack add mime%space
map .d filter_stack add type d
map .f filter_stack add type f
map .l filter_stack add type l
map .| filter_stack add or
map .& filter_stack add and
map .! filter_stack add not
map .r console filter_stack rotate
map .c filter_stack clear
map .* filter_stack decompose
map .p filter_stack pop
map .. filter_stack show

# Bookmarks {{{2
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks

# copymaps {{{2
copymap zf zz
copymap <C-h> <backspace>
copymap <backspace> <backspace2>
#copymap J <C-D>
#copymap K <C-U>
copymap ZQ ZZ ZQ Zz Zq
copymap m<bg>  um<bg> `<bg> '<bg>

# chmod with some python help: {{{2
eval for arg in "rwxXst": cmd("map +u{0} shell -f chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f chmod u-{0} %s".format(arg))

# ===================================================================
# [[ Define keys for the console ]]
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-b> eval fm.ui.console.move_word(left=1)
cmap <a-f> eval fm.ui.console.move_word(right=1)

copycmap <a-b> <a-left>
copycmap <a-f> <a-right>

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <ESC>       <C-g>
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# Keybindings: Pager {{{1
# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

# Basic
pmap     <C-l> redraw_window
pmap     <ESC> pager_close
pmap E      edit_file

# Copymaps
copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>
copypmap <ESC> q Q i <F3>

# Keybindings: Taskview {{{1

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close

copytmap <ESC> q Q w <C-c>
copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

