snippet '\s*([-=]){2,}' "border in 78" br
`!p
atom = match.group(1)
snip.rv = atom * 78
`
endsnippet

global !p
class Plugin():
  def __init__(self):
    self.name = self.get_name()


  @staticmethod
  def get_name():
    fname = snip.fn
    root = re.match('(?P<root>.*).txt', fname)['root']
    return root


  @staticmethod
  def get_repo():
    repo = vim.eval('expand("%:p:h:t")')
    return repo


  @staticmethod
  def make_helptag(target):
    return '*' + target + '*'


  @staticmethod
  def append_helptag(opt_name=''):
    tag = '*' + opt_name + '*'
    concealed_len = 2 # two of `*` for help-tag.
    width = int(vim.eval('&textwidth')) - len(opt_name) - len(tag) + concealed_len - 1
    spaces = vim.eval(f'repeat(" ", {width})')

    return opt_name + spaces + tag


  def set_header(self, subtitle=''):
    title = subtitle.upper()
    tag = '*' + self.name + '-' + subtitle + '*'
    concealed_len = 2 # two of `*` for help-tag.
    width = int(vim.eval('&textwidth')) - len(title) - len(tag) + concealed_len
    spaces = vim.eval(f'repeat(" ", {width})')

    return title + spaces + tag.lower()


endglobal


snippet 'repo?' "Expand plugin repo name in helptag" wr
|`!p snip.rv = Plugin.get_repo()`|
endsnippet

snippet 'name?' "Expand plugin name in helptag" wr
|`!p snip.rv = Plugin.get_name()`|
endsnippet

snippet 'Name?' "Expand plugin name, capitalized, in helptag" wr
|`!p snip.rv = Plugin.get_name().capitalize()`|
endsnippet


snippet toc "Generate blueprint of TOC" b
`!p
fpath = vim.eval('expand("%:p")')
with open(fpath, 'r') as file:
  lines = file.readlines()

pat_subtitle_line = r'^[A-Z]+\s+\*\S+\*'
subtitle_lines = filter(lambda x: re.match(pat_subtitle_line, x), lines)
subtitle_lines = filter(lambda x: not re.match(r'^CONTENTS', x), subtitle_lines)
subtitles = map(lambda x : re.match(r'(^[A-Z]+)', x).groups()[0].lower(), subtitle_lines)

plugin = Plugin.get_name()

first_tbl_len = 24

toc_lines = map(lambda x: x.capitalize()
              + vim.eval(f'repeat(" ", {first_tbl_len} - {len(x)})')
              + "|" + plugin + "-" + x + "|",
              subtitles)
new_toc = "\n".join(toc_lines)

snip.rv = new_toc

`
endsnippet

snippet '(help|vim)' "Init template of vim-help" "snip.line == 0" bre
`!p
vim.command('setlocal filetype=help')

plugin = Plugin()

``!p
name = plugin.name

helptags = Plugin.make_helptag(name + '.txt')
snip.rv = helptags

``!v repeat(' ', 16)`${1:Concept}

Version: 1.0.0
Author: kaile256 <kaile256acc at gmail.com>
License: MIT license

==============================================================================
`!p snip.rv = plugin.set_header('contents')`

toc$2

==============================================================================
`!p snip.rv = plugin.set_header('introduction')`


==============================================================================
`!p snip.rv = plugin.set_header('usage')`

------------------------------------------------------------------------------
`!p snip.rv = plugin.set_header('variable')`


-------------------------------------------------------------------------------
`!p snip.rv = plugin.set_header('mapping')`


------------------------------------------------------------------------------
`!p snip.rv = plugin.set_header('command')`


==============================================================================
`!p snip.rv = plugin.set_header('compatibility')`


==============================================================================
vim:ft=help:tw=78:ts=8:sts=8:sw=8:norl:fen:nojs
endsnippet

priority -50

snippet '([A-Z]{2,})' "Append help-tag for HEADER" "snip.line > 0" bre
`!p
plugin = Plugin()
snip.rv = plugin.set_header(match.group(1))

`
endsnippet

priority -80

snippet '(\S{2,})' "Append help-tag for option" "snip.line > 0" bre
`!p snip.rv = Plugin.append_helptag(match.group(1))`
endsnippet

