global !p
def plugin_filepath():
  fullpath = vim.eval('expand("%:p")')
  filepath = re.sub(r'.*/vim-[^/]+?/(.*)', r'\1', fullpath)

  if re.search('$HOME', filepath): return ''

  return filepath


def plugin_name_with_prefix():
  fullpath = vim.eval('expand("%:p")')
  plugin_name = re.sub(r'.*/(vim-[^/]+?)/.*', r'\1', fullpath)

  if re.search('/', plugin_name): return ''

  return plugin_name


def plugin_name_without_prefix():
  raw = plugin_name_with_prefix()
  plugin_name = re.sub(r'vim-([^/]+?)', r'\1', raw)
  return plugin_name


def plugin_name_underscored():
  raw = plugin_name_without_prefix()
  underscored = raw.replace('-', '_')
  return underscored


def autoload_prefix():
  underscored = plugin_name_underscored()
  prefix = underscored + '#' if underscored else 's:'
  return prefix


def plugin_loaded():
  underscored = plugin_name_underscored()

  if not underscored: return ''

  filepath = plugin_filepath()
  dir = r'\bplugin/'
  if not re.search(dir, filepath): return ''

  rv = (
f"if exists('g:loaded_{underscored}') | finish | endif",
f'let g:loaded_{underscored} = 1'
  )
  return '\n'.join(rv)


def MIT_license():
  return '''" License: MIT license {{{
"     Permission is hereby granted, free of charge, to any person obtaining
"     a copy of this software and associated documentation files (the
"     "Software"), to deal in the Software without restriction, including
"     without limitation the rights to use, copy, modify, merge, publish,
"     distribute, sublicense, and/or sell copies of the Software, and to
"     permit persons to whom the Software is furnished to do so, subject to
"     the following conditions:
"
"     The above copyright notice and this permission notice shall be included
"     in all copies or substantial portions of the Software.
"
"     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
"     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
"     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
"     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
"     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
"     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
"     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
" }}}'''


def plugin_header():
  plugin_name = plugin_name_with_prefix()

  if not plugin_name: return ''

  author = 'kaile256'

  rv = (
'" ============================================================================',
f'" Repo: {author}/{plugin_name}',
f'" File: {plugin_filepath()}',
f'" Author: {author}',
f'{MIT_license()}',
'" ============================================================================',
  )

  return '\n'.join(rv)


def plugin_cpoptions():
  rv = (
  '" save \'cpoptions\' {{{',
  'let s:save_cpo = &cpo',
  'set cpo&vim',
  '"}}}\n',

  f"{snip.v.text}",

  '" restore \'cpoptions\' {{{1',
  'let &cpo = s:save_cpo',
  'unlet s:save_cpo',
  )

  return '\n'.join(rv)


def plugin_modeline():
  options = (
  'et',
  'ts=2',
  'sts=2',
  'sw=2',

  'fdm=marker',

  'tw=79',
  )

  return '" modeline {{{1\n' \
      + '" vim:' \
      + ' '.join(options)


def plugin_footer():
  return plugin_cpoptions() + '\n\n' + plugin_modeline()


endglobal

snippet function "function! foo() ... endfunction" b
function! `!p snip.rv = autoload_prefix()`${2:do}(${3:#:args}) abort
${VISUAL:command}
endfunction
endsnippet

snippet augroup "augroup foo ... augroup END" b
augroup my${1:Name}
  au ${2:FileType} ${3:*} ${4:${VISUAL:command}}
augroup END
endsnippet

snippet noremap "noremap [rhs] [lhs]" i
noremap `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:${VISUAL:rhs}}
endsnippet

snippet '(?<!nore)map' "map [rhs] [lhs]" ir
map `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:<Plug>}${6:${VISUAL:(rhs)}}
endsnippet

snippet try "try ... endtry" b
try
  ${1:${VISUAL}}
endtry
endsnippet

snippet catch "catch error E$1" b
catch /^Vim\v%((\a+))?:E${1:123}/
endsnippet

snippet substitute "substitute({expr}, {pat}, {sub}, {flags})" b
substitute(${1:expr}, ${2:pat}, ${3:sub}, ${4:'g'})
endsnippet

snippet undo_ftplugin "template for b:undo_ftplugin" b
if exists('b:undo_ftplugin')
  let b:undo_ftplugin .= ' | '
else
  let b:undo_ftplugin = ''
endif
let b:undo_ftplugin .= 'setl ${1:fdm< fde<}'
endsnippet

snippet scriptencoding "" b
scriptencoding utf-8
endsnippet

snippet '#(\d)' "fold up commands with foldmarkers" br
${VISUAL:/\n(.*)//} "{{{`!p snip.rv = match.group(1)`
${VISUAL:/(.+?)\n//m}
"}}}`!p snip.rv = match.group(1)`
endsnippet

snippet init "Let's create a plugin!" "snip.line == 0" be
`!p snip.rv = plugin_header()`
`!p
loaded = plugin_loaded()
snip.rv = '\n' + loaded if loaded else ''
`

`!p snip.rv = plugin_footer()`
endsnippet

snippet header "Header for plugin" b
`!p snip.rv = plugin_header()`
endsnippet

snippet mit "MIT License" b
`!p snip.rv = MIT_license()`
endsnippet

snippet loaded "if exists(g:loaded_$1) | finish | endif" b
`!p snip.rv = plugin_loaded()`
endsnippet

snippet cpoptions "Save cpoptions" b
`!p snip.rv = plugin_cpoptions()`
endsnippet

snippet footer "Footer for plugin" b
`!p snip.rv = plugin_footer()`
endsnippet

snippet modeline "modeline for plugin" b
`!p snip.rv = plugin_modeline()`
endsnippet

snippet symbols "represents symbols on standard keyboard" b
'][=+-_|(){}\:;?/>.~`!@#$%^&*"'']'
endsnippet
