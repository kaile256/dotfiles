snippet vim "[dein] init a table of repo" b
[[plugins]]
repo = '`!v substitute(@+, 'https://github.com/\(.\{-}/.\{-}\)/blob/.*', '\1', '')`'
$0
endsnippet

snippet 'h(ook_)?a(dd)?' "hook_add = 'runtime add/foo.vim'" br
hook_add = 'runtime add/${1:`!v snip#vim#name_of_plugin()`}.vim'
endsnippet

snippet 'h(ook_)?s(ource)?' "hook_source = 'runtime source/foo.vim" br
hook_source = 'runtime source/${1:`!v snip#vim#name_of_plugin()`}.vim'
endsnippet

snippet 'h(ook_)?p(ost_)?(s(ource)?)?' "hook_post_source = 'runtime post/foo.vim'" br
hook_post_source = 'runtime post/${1:`!v snip#vim#name_of_plugin()`}.vim'
endsnippet

snippet '(h(ook_)?)?d(one_)?u(pdate)?' "hook_done_update = 'UpdateRemotePlugins'" br
hook_done_update = '${1:call remote#host#UpdateRemotePlugins()}'
endsnippet

snippet on_event "on_event" b
on_event = '${1:BufRead}'
endsnippet

snippet on_ft "on_ft" b
on_ft = '${1:vim}'
endsnippet

snippet on_map "on_map" b
on_map = {${1:nox} = '<Plug>(${2:`!v snip#vim#name_of_plugin()`}'}
endsnippet

snippet on_func "on_func" b
on_func = '${1:`!v snip#vim#prefix_for_function()`}'
endsnippet

snippet on_cmd "on_cmd" b
on_cmd = '${1:`!v snip#vim#name_of_plugin()`}'
endsnippet

snippet on_path "on_path" b
on_path = '${0:#:\.ext (conpared in "=~#"}'
endsnippet

snippet on_source "[dein] load the plugin before the listed plugins're loaded" b
on_source = '${1:vim-fugitive}'
endsnippet

snippet build "[dein] shellcmd after update of repo" b
build = '${1:bash install.sh}'
endsnippet

snippet type "[dein] 'git', 'none', or 'raw (with 'script_type')'" b
type = '${1:git}'
endsnippet

snippet depends "[dein] add dependence upon other plugins" b
depends = '${1:vim-fugitive}'
endsnippet

snippet 'sudo|trusted' "trusted = 1 (load plugin as in 'sudo'" rb
trusted = 1
endsnippet

snippet timeout "[dein] timeout sec for updating/installing plugin" b
timeout = ${1:200 # 1(sec)}
endsnippet

snippet script_type "[dein] copy the repo under $1/ and add &rtp there" b
script_type = '${1:colors}'
endsnippet
