global !p
def insert_props_as_tabstops(ts, snip):
  snip.rv = ""
  args = map(lambda a: a.strip(), ts.split(','))
  args = list(filter(lambda a: a != 'self', args))

  snip >> 1
  for prop in args:
    if prop != "":
      snip += "self.%s = %s" % (prop, prop)

endglobal

snippet local "local $1 = $2" b
local $1 = $2
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "anonymous function" "'=' in snip.buffer[snip.line]" erw
function($1) ${2:${VISUAL}} end
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "includes ref to itself, equivalent to `local $1; $1 = function() $2 end`" "'=' not in snip.buffer[snip.line]" erw
function ${1:func}(${2:args})`!p

vtext = snip.v.text
if vtext == "":
  snip += ""
else :
  snip >> 1
  snip += vtext


`end
endsnippet

snippet '(local (\S+) = {})' "define Class.new()" br
`!p
# These snippets for writing Class.new() are derived from the tutorial:
# http://lua-users.org/wiki/ObjectOrientationTutorial

snip.rv = match.group(1)`
`!p
cls = match.group(2)

snip.rv = cls
`.__index = `!p snip.rv = cls`

setmetatable(`!p snip.rv = cls`, {`!p
snip.rv = ""
if t[1] != "":
  snip.rv += "\n"
  snip.rv += " " * vim.options['shiftwidth']
  snip.rv += "__index = "
          `${1:InheritedClass}`!p snip.rv = "" if t[1] == "" else ","`
  __call = function(cls, ...)
    return cls.new(...)
  end,
})
endsnippet

snippet '(function )?\s*(\S+).new' "Start writing class.new()" br
function `!p
name = match.group(2)
snip.rv = name
`.new(${1:args})
  local self = setmetatable({}, `!p snip.rv = name`)`!p
insert_props_as_tabstops(t[1], snip)
`
  return self`!p

snip.rv = ""
funcdef = match.group(1) or ""
if funcdef == "":
# if "function " is preceded, assume that the code has been already expanded as
# a snippet.
  snip += "end"


`
endsnippet
