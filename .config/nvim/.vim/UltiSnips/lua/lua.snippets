global !p
def insert_props_as_tabstops(ts, snip):
  snip.rv = ""
  args = map(lambda a: a.strip(), ts.split(','))
  args = list(filter(lambda a: a != 'self', args))

  snip >> 1
  for prop in args:
    if prop != "":
      snip += "self.%s = %s" % (prop, prop)

endglobal

snippet local "local $1 = $2" b
local $1 = $2
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "anonymous function" "'=' in snip.buffer[snip.line]" erw
function($1) $2 end
endsnippet

snippet '(?:fun(?:c(?:tion)?)?|fu|fn)' "includes ref to itself, equivalent to `local $1; $1 = function() $2 end`" "'=' not in snip.buffer[snip.line]" erw
function ${1:func}(${2:args})
end
endsnippet

snippet '(local (\S+) = {})' "define class.new()" br
`!p snip.rv = match.group(1)`
`!p
cls = match.group(2)

snip.rv = cls
`.__index = `!p snip.rv = cls`

function `!p snip.rv = cls`.new${1}
end
endsnippet

snippet 'function \s*(\S+).new' "Start writing class:new()" br
function `!p
name = match.group(1)
snip.rv = name
`.new(${1:args})
  local self = setmetatable({}, `!p snip.rv = name`)`!p
insert_props_as_tabstops(t[1], snip)
`
  return self
endsnippet
