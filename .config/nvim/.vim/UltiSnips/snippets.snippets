global !p
def is_in_python_code():
  syntax_name = vim.eval('synIDattr(synID(line("."), col(".") - 1, 1), "name")')
  return re.search('python', syntax_name, flags=re.IGNORECASE)

def is_flag_for_snippets():
  line = snip.buffer[snip.line]
  return re.search(r'^snippet ', line)
endglobal

snippet snippet "initialize ultisnips" b
`!p snip.rv = "snippet"` ${1:trigger} "${2:Description}" ${3:b}
${0:${VISUAL}}
`!p snip.rv = "endsnippet"`
endsnippet

snippet endsnippet "no need to expand" b
`!p snip.rv = "endsnippet"`
endsnippet

snippet #! "expr with shebang"
\`${0:#!}/usr/bin/env ${1:bash} ${2:#:expr}\`
endsnippet

snippet !v "expr for vim"
\`!v ${1:#:expr}\`
endsnippet

snippet ${VISUAL} "${VISUAL:(selected text)}" i
\${VISUAL:${VISUAL:default}}
endsnippet

context "is_flag_for_snippets()"
snippet ' ([biwrtsmA]*e[biwrtsmA]*)' "'e' flag for top of file " ir
 "snip.line == 0" `!p snip.rv = match.group(1)`
endsnippet

snippet rv "snip.rv = $1" i
snip.rv = ${1}
endsnippet

snippet '\$(\d)' "placeholder" ir
${`!p snip.rv = match.group(1)`:${1:${VISUAL:default}}}
endsnippet


priority -50

context "is_in_python_code()"
snippet '([1-9]\d*)' "match.group($1)" ir
match.group(`!p snip.rv = match.group(1)`)
endsnippet

context "not is_in_python_code()"
snippet '([1-9]\d*)' "`!p snip.rv = match.group($1)`" ir
\`!p snip.rv = match.group(`!p snip.rv = match.group(1)`)\`
endsnippet
