global !p
def autoload_prefix():
  fullpath = vim.eval('expand("%:p")')
  m = re.search(r'(?<=/autoload/)(?P<plugin>[^/]*)(?P<path>.*)', fullpath)
  try:
    plugin = m['plugin']
    underscored = plugin.replace('-', '_')
    autoload = path.replace('/', '#').replace('.vim', '')
    prefix = underscored + '#' + autoload + '#'
  except TypeError as e:
    prefix = 's:'

  return prefix


def find_funcname():
  pat_funcdef = '^\s*fu\%[nction]! '
  line_funcdef = vim.eval(f"getline(search('{pat_funcdef}', 'nWb'))")
  funcname = vim.eval(f"matchstr('{line_funcdef}', '{pat_funcdef}\s*\zs.*\ze(')")
  return funcname


class Insert:
  def function_call(func_name):
    vim.eval('search("^\s*endfunction", "W")')
    snip.expand_anon('\ncall ' + func_name + '($1)\n')
    pass


endglobal

snippet scriptencoding "" b
scriptencoding utf-8
endsnippet

snippet 'let (\S+)' "let $1 = get($2, '$3', $4)" rw
`!p
target = match.group(1)

m = re.match(r'(?P<prefix>.*(?=\.)|[bwtglsav]:)\.?(?P<suffix>.*)', target)

`let `!p

snip.rv = target

` = get(${1:`!p snip.rv = m["prefix"]`}, '${2:`!p snip.rv = m["suffix"]`}', ${3:${VISUAL:[]}})
endsnippet

snippet if "if $1 ... endif" b
if ${1}
  ${2:${VISUAL}}
endif
endsnippet

post_jump "if snip.tabstop == 0 : Insert.function_call(snip.tabstops[1].current_text + snip.tabstops[2].current_text)"
snippet 'fu?n?(c(tion)?)?' "function! foo() ... endfunction" br
function! ${1:`!p snip.rv = autoload_prefix()`}${2:do}(${3:#:args}) abort${4}
  ${8:${VISUAL:command}}
endfunction
endsnippet

snippet '\bcall? (.*)' "append `delfunction $1`" r
`!p
'''Expand
call foo(bar)
delfunction foo
'''

func = match.group(1)
m = re.match(r'([^(]*)', func)
func_name = m.group(1)
`call `!p snip.rv = func`
delfunction `!p snip.rv = func_name`
endsnippet

snippet 'aug(roup)?' "augroup foo ... augroup END" br
augroup my${1:Name}
  au ${2|FileType,BufRead|} ${3:*} ${4:${VISUAL:command}}
augroup END
endsnippet

snippet 'nore(map)?' "noremap [rhs] [lhs]" ir
noremap `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:${VISUAL:rhs}}
endsnippet

snippet '(?<!nore)map' "map [rhs] [lhs]" ir
map `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:<Plug>}${6:${VISUAL:(rhs)}}
endsnippet

snippet try "try ... endtry" b
try
  ${1:${VISUAL}}
endtry
endsnippet

snippet catch "catch error E$1" b
catch /^Vim\v%((\a+))?:E${1:123}/
endsnippet

snippet '(let )?save_view' "Keep view" br
let ${1:save_view} = winsaveview()
${2:VISUAL}
call winrestview($1)
endsnippet

snippet 'let (s:[a-zA-Z0-9_]+)\.([a-zA-Z0-9_]+) = funcref' "funcref('s:$2')" br
`!p
m1 = match.group(1)
m2 = match.group(2)

`let `!p snip.rv = m1`.`!p snip.rv = m2` = funcref('s:`!p snip.rv = m2`')
endsnippet

snippet "(let\s*)?fun?c?r(ef)?" "let s:foo.bar = funcref('s:foo__bar')" br
`!p
funcname = find_funcname()
class_name = vim.eval(f"matchstr('{funcname}', '.*\ze__')")
method = vim.eval(f"matchstr('{funcname}', '__\zs.*')")

`let `!p

snip.rv = class_name`.`!p snip.rv = method

` = funcref('`!p snip.rv = funcname`')
endsnippet
