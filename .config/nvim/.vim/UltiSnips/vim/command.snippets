global !p
def plugin_name_underscored():
  fullpath = vim.eval('expand("%:p")')
  plugin_name = re.sub(r'.*/vim-([^/]*?)/.*', r'\1', fullpath)
  if plugin_name == fullpath:
    return ''
  underscored = plugin_name.replace('-', '_')
  return underscored


def autoload_prefix():
  underscored = plugin_name_underscored()
  prefix = underscored + '#' if underscored else 's:'
  return prefix

class Insert:
  def function_call(func_name):
    vim.eval('search("^\s*endfunction", "W")')
    snip.expand_anon('\ncall ' + func_name + '($1)\n')
    pass


endglobal

snippet scriptencoding "" b
scriptencoding utf-8
endsnippet

snippet 'let (.+)' "let $1 = get($2, '$3', $4)" rw
`!p
target = match.group(1)

m = re.match(r'(?P<prefix>.*(?=\.)|[bwtglsav]:)\.?(?P<suffix>.*)', target)

`let `!p

snip.rv = target

` = get(${1:`!p snip.rv = m["prefix"]`}, '${2:`!p snip.rv = m["suffix"]`}', ${3:${VISUAL:[]}})
endsnippet

snippet if "if $1 ... endif" b
if ${1}
  ${2:${VISUAL}}
endif
endsnippet

post_jump "if snip.tabstop == 0 : Insert.function_call(snip.tabstops[1].current_text + snip.tabstops[2].current_text)"
snippet 'fu?n?(c(tion)?)?' "function! foo() ... endfunction" br
function! ${1:`!p snip.rv = autoload_prefix()`}${2:do}(${3:#:args}) abort${4}
  ${8:${VISUAL:command}}
endfunction
endsnippet

snippet '\bcall? (.*)' "append `delfunction $1`" r
`!p
'''Expand
call foo(bar)
delfunction foo
'''

func = match.group(1)
m = re.match(r'([^(]*)', func)
func_name = m.group(1)
`call `!p snip.rv = func`
delfunction `!p snip.rv = func_name`
endsnippet

snippet 'aug(roup)?' "augroup foo ... augroup END" br
augroup my${1:Name}
  au ${2|FileType,BufRead|} ${3:*} ${4:${VISUAL:command}}
augroup END
endsnippet

snippet 'nore(map)?' "noremap [rhs] [lhs]" ir
noremap `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:${VISUAL:rhs}}
endsnippet

snippet '(?<!nore)map' "map [rhs] [lhs]" ir
map `!v expand('%:p') =~# '/ftplugin/' ? '<buffer><nowait>' : ''
`${1:<silent> }${2:lhs} ${5:<Plug>}${6:${VISUAL:(rhs)}}
endsnippet

snippet try "try ... endtry" b
try
  ${1:${VISUAL}}
endtry
endsnippet

snippet catch "catch error E$1" b
catch /^Vim\v%((\a+))?:E${1:123}/
endsnippet

