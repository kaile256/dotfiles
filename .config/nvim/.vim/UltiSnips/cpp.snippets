# Ref: honza/vim-snippets/UltiSnips/snippets.snippets

# Includes call(), rbegin()
# snippet '\b[cr]*(all|begin)' "$1.begin(), $1.end()" rw
snippet '(begin|all)' "$1.$2begin(), $1.$2end()" ir
begin(), `!v matchstr(getline('.'), '(\zs\h\S*\ze\v(all|begin)')`end()
endsnippet

priority 1
snippet '(?<=\()(begin|all)' "$1.$2begin(), $1.$2end()" ir
begin(${1:v}), end($1)
endsnippet

snippet '(#)?in(c(lude)?)?' "header" bri
#include ${1:<vector>}
endsnippet

snippet '(#)?de(f(ine)?)?' "macro" bri
#define ${1}
endsnippet

snippet ll "long long" i
long long ${1}
endsnippet

snippet template "template <typename T>" b
template <${1:typename} ${2:T}> ${3:void} ${4:funcname}(${5:$2} ${6:args}) {
  ${0:return 0;}
  }
endsnippet

snippet '(/)?\*' "/* ... */" rw
/*${1:Comment}*/
endsnippet

snippet elseif "else if (cond)" A
else if ($1)
endsnippet

snippet 'for \(au(?!.*:)' "for (auto &&x : v)" rA
for (auto &&${1:val} : ${2:vec}`!v search('\%#.*)', 'cnW') ? '' : ')'`
endsnippet

snippet idx "distance(v.begin(), itr_v)" w
distance(${1:v}.begin(), ${2:itr})
endsnippet

snippet .pb "push_back" i
.push_back
endsnippet

snippet ub "Stop at itr_$1 == $2.end()" w
upper_bound
endsnippet

snippet lb "Stop at itr_$1 == $2.end()" w
lower_bound
endsnippet

