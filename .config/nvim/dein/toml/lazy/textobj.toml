# From: dein/dein.vim

# NOTICE: `on_map` makes no sense for textobj unless you create in add/

[[plugins]]
repo = 'kana/vim-textobj-user'
on_func = ['textobj#user#']

[[plugins]]
repo = 'osyo-manga/vim-textobj-from_regexp'
# Select the area specifed in vim-regex.
on_func = ['textobj#from_regexp#']
hook_add = 'source $DEIN_RC_DIR/textobj/from_regexp/add.vim'

[[plugins]]
repo = 'glts/vim-textobj-comment'
# TODO: `gq` on Comment.
on_map = {ox = '<Plug>(textobj-comment'}
hook_add = 'runtime add/textobj-comment.vim'
hook_done_update = '''
e $DEIN_GITHUB_DIRglts/vim-textobj-comment/plugin/textobj/comment.vim
" Mnemonic: Note
g;'select-;s;c\ze',;n
g;'select-;s;C\ze',;N
write
'''
# [[plugins]]
# # repo = 'AndrewRadev/dsf.vim'
# # Sandwich like textobj for foo('bar', 'baz') format.
# # It works more expectedly than sandwich's.
# on_map = {ox = '<Plug>DsfTextObject'}
# hook_add = 'runtime add/dsf.vim'
[[plugins]]
repo = 'kana/vim-textobj-fold'
# Note: Instead, `on_map` won't work as expected: doubly the preceding operator
# is called.
# on_map = {ox = '<Plug>(textobj-fold'}
depends = ['vim-textobj-user']
on_event = ['BufWinEnter']
hook_add = 'runtime add/textobj-fold.vim'
[[plugins]]
repo = 'kana/vim-textobj-entire'
# For: entire lines of current buffer.
# Note: `on_map` makes no sense in omap.
depends = ['vim-textobj-user']
on_map = {ox = ['<Plug>(textobj-entire']}
hook_add = 'runtime add/textobj-entire.vim'
hook_post_source = 'runtime post/textobj-entire.vim'
#[[plugins]]
#repo = 'eikendev/vim-textobj-names'
## For: names separated by delimiters like -, _, /, @ or #.
#on_event = 'BufRead'
#hook_add = 'runtime add/textobj-names.vim'
#[[plugins]]
#repo = 'coderifous/textobj-word-column.vim'
## Note: Use it with blockwise-visual mode.
#on_event = 'BufRead'
#hook_add = '''
#let g:skip_default_textobj_word_column_mappings = 1
#" Mnemonic: Queue
#xnoremap <silent> aq :<C-u>call TextObjWordBasedColumn("aw")<cr>
#xnoremap <silent> iq :<C-u>call TextObjWordBasedColumn("iw")<cr>
#onoremap <silent> aq :call TextObjWordBasedColumn("aw")<cr>
#onoremap <silent> iq :call TextObjWordBasedColumn("iw")<cr>
#xnoremap <silent> aQ :<C-u>call TextObjWordBasedColumn("aW")<cr>
#xnoremap <silent> iQ :<C-u>call TextObjWordBasedColumn("iW")<cr>
#onoremap <silent> aQ :call TextObjWordBasedColumn("aW")<cr>
#onoremap <silent> iQ :call TextObjWordBasedColumn("iW")<cr>
#'''
#[[plugins]]
#repo = 'sgur/vim-textobj-parameter'
#on_event = ['BufRead', 'TextChanged']
[[plugins]]
repo = 'kana/vim-textobj-indent'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>(textobj-indent-'}
hook_add = 'source $DEIN_RC_DIR/textobj-indent/add.vim'
[[plugins]]
repo = 'saaguero/vim-textobj-pastedtext'
on_map = {nox = '<Plug>(textobj-pastedtext-text)'}
hook_add = 'runtime add/textobj-pastedtext.vim'
[[plugins]]
repo = 'amerlyq/vim-textobj-keyvalue'
on_map = {ox = ['<Plug>(textobj-key-', '<Plug>(textobj-value-']}
hook_add = 'runtime add/textobj-keyvalue.vim'
#[[plugins]]
#repo = 'vimtaku/vim-textobj-keyvalue'
## Possibly better on Vimscript, but the name is duplicated to that of amerlyq.
#hook_add = 'runtime add/textobj-keyvalue.vim'
#[ on FileType ]
# [[plugins]]
# repo = 'guns/vim-sexp'
# # Edit S-expressions with the textobjcts.
# on_map = {noxi = '<Plug>(sexp_'}
# hook_add = 'source $DEIN_RC_DIR/sexp/add.vim'
[[plugins]]
repo = 'bps/vim-textobj-python'
on_ft = 'python'
hook_done_update = '''
e $DEIN_GITHUB_DIR/bps/vim-textobj-python/after/ftplugin/python/textobj-python.vim
g/move-/s;pc;M
g/move-/s;pf;m

g/select-/s;ac;aM
g/select-/s;ic;iM

g/select-/s;af;am
g/select-/s;if;im
write
'''

#[[plugins]]
#repo = 'coachshea/vim-textobj-markdown'
## Note: enough w/ vim-textobj-fold
#on_ft = ['markdown']
[[plugins]]
repo = 'kana/vim-textobj-function'
# Note: should activates where lsp doesn't provide the kind of textobjects.
# Note: available on vim/java/c, but coc's are better on java; don't know on c
depends = ['vim-textobj-user']
on_ft = 'vim'
hook_source = 'runtime source/textobj-function.vim'
# [[plugins]]
# repo = 'spacewander/vim-textobj-lua'
# if = "has('python')"
# depends = ['vim-textobj-user']

#[ Git ]
[[plugins]]
repo = 'rhysd/vim-textobj-conflict'
depends = ['vim-textobj-user']
on_map = {ox = '<Plug>(textobj-conflict-'}
hook_source = 'source $DEIN_RC_DIR/textobj/conflict/sou.vim'

#[ Visual ]
[[plugins]]
repo = 'kana/vim-niceblock'
# Extend I/A in v/V as in <C-v>.
on_map = {x = ['<Plug>(niceblock-']}
hook_add = 'source $DEIN_RC_DIR/niceblock/add.vim'
