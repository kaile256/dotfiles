# From: dein/dein.vim

#[ Refactor ]
[[plugins]]
repo = 'AndrewRadev/inline_edit.vim'
# Edit in another window, like markdown's fenced scripts
on_cmd = 'InlineEdit'

#[ Find Root ]
[[plugins]]
repo = 'airblade/vim-rooter'
on_cmd = 'Rooter'
on_func = 'FindRootDirectory'
hook_add = 'runtime add/rooter.vim'
hook_source = 'runtime source/rooter.vim'
hook_post_source = 'runtime post/rooter.vim'
# [[plugins]]
# repo = 'mattn/vim-findroot'
# on_cmd = 'FindRoot'
# hook_add = 'runtime add/findroot.vim'
# # To enable to :FindRoot w/ other commands through <bar>.
# hook_done_update = '''
# e $DEIN_GITHUB_DIR/mattn/vim-findroot/plugin/findroot.vim
# g/command!/norm! Ea -bar
# g/s:findroot(/s/1/0
# write
# '''

#[ Cmdline ]
[[plugins]]
repo = 'notomo/cmdbuf.nvim'
# Replace cmdline-window.
on_lua = ['cmdbuf']
[[plugins]]
# repo = 'kana/vim-altercmd' # Original
# repo = 'tyru/vim-altercmd' # Extend it to other modes.
repo = 'kaile256/vim-altercmd'
rev = 'develop'
if = '!exists("g:vscode")'
on_event = ['CmdLineEnter', 'CmdWinEnter']
hook_post_source = 'runtime post/altercmd.vim'
[[plugins]]
repo = 'markonm/traces.vim'
# Pattern preview for :substitute, :global, :v and :sort.
if = 'has("patch-8.0.1206")'
on_event = 'CmdLineEnter'
hook_source = 'runtime source/traces.vim'
[[plugins]]
repo = 'vim-scripts/sherlock.vim'
# Completion mappings in Cmdline.
on_func = ['sherlock#']
hook_source = 'runtime source/sherlock.vim'
# [[plugins]]
# repo = 'nacro90/numb.nvim'
# # Disturb completion with wildmenu.
# # Auto scroll as cmdline range.
# on_event = ['CmdLineChanged']
# hook_post_source = 'luafile $DEIN_RC_DIR/numb/pos.lua'

#[ Paste ]
# [[plugins]]
# repo = 'ConradIrwin/vim-bracketed-paste'
# # Obsolete 'paste' on TUI, but the feature will be built-in.
# on_event = ['InsertCharPre']

#[ Undo ]
#[[plugins]]
#repo = 'machakann/vim-highlightedundo'
## TODO: Make it compatible with vim-repeat
#on_map = '<Plug>(highlightedundo-'
[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'Mundo'
hook_add = 'runtime add/mundo.vim'
hook_source = 'runtime source/mundo.vim'
#[[plugins]]
#repo = 'jaxbot/selective-undo.vim'
#on_event = 'BufRead'
#hook_post_source = 'runtime add/selective-undo.vim'
#[[plugins]]
#repo = 'machakann/vim-highlightedundo'
#if = 'executable("diff")'
#on_event = 'BufRead'
#hook_post_source = 'runtime add/highlightedundo.vim'
#[[plugins]]
#repo = 'mbbill/undotree'
#on_map = 'Undotree'
#hook_add = 'runtime add/undotree.vim'
#[ Diff ]
[[plugins]]
repo = 'will133/vim-dirdiff'
# Compare a pair of directories recursively and start vimdiff.
on_cmd = 'DirDiff'
hook_add = 'runtime add/dirdiff.vim'

[[plugins]]
repo = 'rickhowe/diffchar.vim'
on_if = '&diff'
# DiffUpdated for Internal diff
# FilterWritePost for External diff
on_event = ['DiffUpdated', 'FilterWritePost']
hook_source = 'runtime add/diffchar.vim'
[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_map = {n = '<Plug>(linediff-'}
on_cmd = 'Linediff'
hook_add = 'runtime add/linediff.vim'
#[[plugins]]
#repo = 'chrisbra/vim-diff-enhanced'
#on_cmd = ['EnhancedDiff', 'PatienceDiff']
#hook_add = 'runtime diff-enhanced.vimrc'
# :norm <c-a>/<c-x>
#[[plugins]]
#repo = 'qwertologe/nextval.vim'
## has some errors; unintended deletion of words around the target numbers
#on_map = '<Plug>nextval'
#hook_add = 'runtime add/nextval.vim'

#[ Quickfix ]
[[plugins]]
repo = '$VIM_PACK_HOME/cfilter'
# Get matched named files from quickfix list by ':Cfilter /pat/'.
on_cmd = ['Cfilter', 'Lfilter']
[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
on_event = ['QuickFixCmdPre']
if = 'has("nvim")'
# Replace old quickfix window.
# With fzf, fuzzy search in quickfix window.
hook_post_source = 'luafile $DEIN_RC_DIR/bqf/pos.lua'

#[ Help ]
[[plugins]]
repo = 'thinca/vim-ref'
on_cmd = ['Ref']
on_func = ['ref#']
on_map = {nx = '<Plug>(ref-'}
hook_source = 'runtime source/ref.vim'
[[plugins]]
repo = 'notomo/helpeek.vim'
# provides a wrapper command to show help in a floating/popup window.
on_cmd = ['Helpeek']

#[ Floating Window ]
# [[plugins]]
# repo = 'ncm2/float-preview.nvim'
# on_source = ['denite.nvim', 'deoplete.nvim', 'coc.nvim']
# hook_source = 'runtime source/float-preview.vim'
#[[plugins]]
#repo = 'voldikss/vim-floaterm'
#on_cmd = 'FloatermToggle'
#on_map = '<Plug>(floaterm-'
#hook_add = 'runtime add/floaterm.vim'
# [ Session ]
[[plugins]]
repo = 'chinnkarahoi/vim-session-tree'
# Save session on closing/opening windows.
# Undoing session behaves as if undoing windows
on_event = ['BufRead']
on_cmd = ['SessionUndo', 'SessionRestore', 'SessionRedo']
hook_add = 'source $DEIN_RC_DIR/session-tree/add.vim'
hook_source = 'luafile $DEIN_RC_DIR/session-tree/sou.lua'
# [[plugins]]
# repo = 'rmagatti/auto-session'
# on_event = ['VimEnter']
# hook_post_source = '''
# lua << EOF
# require('auto-session').setup {
#   auto_session_enable_last_session = true,
#   auto_session_root_dir = $XDG_DATA_HOME .. '/vim/auto-session/session/',
#   auto_save_enabled = true,
#   auto_restore_enabled = true,
# }
# EOF
# '''
# [[plugins]]
# repo = 'xolox/vim-session'
# depends = ['vim-misc']
# on_cmd = ['SessionOpen', 'SessionSave']
# on_event = ['VimEnter']
# hook_done_update = '''
# e $DEIN_GITHUB_DIRxolox/vim-session/plugin/session.vim
# g/command!/g/Session /norm! ndeBP
# g/command!/s/RestartVim/SessionVimRestart
# write
# '''
#[[plugins]]
#repo = 'thaerkh/vim-workspace'
#
#[ Startpage ]
#[[plugins]]
#repo = 'mhinz/vim-startify'

#[ Menu ]
# [[plugins]]
# # repo = 'skywind3000/quickmenu.vim'
# on_func = ['quickmenu#toggle']
# hook_add = 'runtime add/quickmenu.vim'
# hook_post_source = 'runtime post/quickmenu.vim'

#[ Backup ]
# [[plugins]]
# repo = 'ralismark/vim-recover'
# # ??? Just prompt to [o]k, and start editing with an empty buffer.
# if = 'has("nvim")'
# on_event = ['SwapExists']
# [[plugins]]
# repo = 'chrisbra/Recover.vim'
# # # Doesn't work. With this plugin, no prompt arises even when a swap file
# # exists.
# # Add an option, [C]ompare, which starts diff-mode with detected swap file.
# on_event = ['SwapExists']

#[ Large File ]
[[plugins]]
repo = 'vim-scripts/LargeFile'
# Before editing a large file, disable autocmds or any other options whose
# processes are too heavy for large files.
on_event = ['BufReadPre']
hook_source = """
let g:LargeFile = 1 " in megabytes to regard a file as a large file.
"""

#[ Diagram ]
# [[plugins]]
# repo = 'jbyuki/venn.nvim'
# # Draw ASCII diagrams.
# # Usage: `:VBox` is supposed to be used in Visual Block mode with
# # `&visualedit=all`. The command draws a line, or an arrow, when visualized
# # area width is 1; otherwise, it draws a rectangle as visualized.
# on_cmd = ['VBox']

#[ Environmental Variable ]
# [[plugins]]
# repo = 'lambdalisue/edita.vim'
# # Overwrite $EDITOR. Useful for git-commit from terminal buffer.
# # FIXME: Find a good trigger for Vim.
# on_event = ['TermEnter']
