# From: dein/dein.vim

# [[plugins]]
# repo = 'reedes/vim-pencil'
# # auto format upon &tw
# on_func = 'pencil#'
# on_cmd  = 'Pencil'
# hook_add = 'runtime add/pencil.vim'
# hook_source = 'runtime source/pencil.vim'
#
# [[plugins]]
# repo = 'kana/vim-smartchr'
# # Use cohama/lexima.vim instead, one of the plugins that provide almost the
# # same features of vim-smartinput, the author's improved one.
# # Change mappings as count of key typed.
# # For expample, type '>' once, '>'; twice, '>>'; three times '->'.
# on_func = 'smartchr#loop'
#
#[ Template ]
# [[plugins]]
# repo = 'aperezdc/vim-template'
# # Note: Doesn't work.
# on_cmd = 'Template'
# hook_add = 'runtime add/template.vim'
# hook_source = 'runtime source/template.vim'
[[plugins]]
repo = 'mattn/vim-sonictemplate'
# Includes postfix-completion support which expands like snippet.
on_cmd = 'Template'
on_map = {ni = ['<Plug>(sonictemplate']}
on_path = ['base-', 'snip-']
hook_add = 'runtime add/sonictemplate.vim'
hook_source = 'runtime source/sonictemplate.vim'

#[ Snippets; Engine ]
# [[plugins]]
# repo = 'L3MON4D3/LuaSnip'
# # # Define snippets in require'luasnip'.snippets table.
# # hook_post_source = 'luafile $DEIN_RC_DIR/LuaSnip/pos.lua'
[[plugins]]
repo = 'SirVer/ultisnips'
# Note: leave the plugin not to be commented out and set path for document
# Note: coc-snippets doesn't warn at some wrong expressions.
# Note: coc-snippets independently shows preview in completion.
# Note: too lazy because of lazy-controlled CursorMoved or else.
# Note: Once interrupted, no longer do the keymaps work.
# # defined in g:UltiSnipsExpandTrigger
# on_map = {nvi = ['<Plug>(ultisnips-']}
on_path = ['\.snip$', '\.snippets$']
on_func = [
  'UltiSnips#ExpandSnippet',
  'UltiSnips#SaveLastVisualSelection',
]
hook_add = 'runtime add/ultisnips.vim'
hook_source = 'runtime source/ultisnips.vim'
hook_post_source = 'runtime post/ultisnips.vim'
[[plugins]]
repo = 'Shougo/neosnippet.vim'
# Merged PR: Shougo/neosnippet.vim/pull/486
# set the filetype in augroups.vim
# it disturbs on 'n', of cource
on_map = {nvi = '<Plug>(neosnippet'}
on_func =  ['neosnippet#']
on_path = ['\.snip$']
hook_add = 'runtime add/neosnippet.vim'
hook_source = 'runtime source/neosnippet.vim'

#[[plugins]]
#repo = 'Shougo/deoppet.nvim'
#on_func = ['deoppet#']
#on_path = ['\.snip$', '\.snippets$']
#hook_add = 'runtime add/deoppet.vim'
#hook_source = '''
#  runtime once/smaps.vim
#  runtime source/deoppet.vim
#'''
#hook_post_source = 'call deoppet#initialize()'
#[[plugins]]
#repo = 'garbas/vim-snipmate'
#on_event = ['InsertEnter']

#[ Snippets; Contents ]
# [[plugins]]
# repo = 'Shougo/neosnippet-snippets'
# on_source = 'neosnippet.vim'
[[plugins]]
repo = 'honza/vim-snippets'
# originally, snippets for snipmate
on_source = ['ultisnips', 'neosnippet.vim']
[[plugins]]
repo = 'gillescastel/latex-snippets'
on_ft = 'tex'
[[plugins]]
repo = 'epilande/vim-react-snippets'
on_ft = ['javascript']
# [[plugins]]
# repo = 'jceb/emmet.snippets'
# # How does it work?
# on_ft = [
#   'html',
#   'javascriptreact',
#   'typescriptreact',
#   'xml'
# ]
# [[plugins]]
# repo = 'adriaanzon/vim-emmet-ultisnips'
# on_ft = [
#   'html',
#   'javascriptreact',
#   'typescriptreact',
#   'xml'
# ]

#[ Completion ]
# [[plugins]]
# repo = 'hrsh7th/nvim-compe'
# # Often causes unexpected deletion.
# if = 'has("nvim")'
# on_func = ['compe#']
# on_event = ['InsertEnter']
# hook_add = 'source $DEIN_RC_DIR/compe/add.vim'
# hook_post_source = 'luafile $DEIN_RC_DIR/compe/pos.lua'
# [[plugins]]
# repo = 'tzachar/compe-tabnine'
# build = 'bash install.sh'
# on_source = ['nvim-compe']
#[[plugins]]
#repo = 'Shougo/deoplete.nvim'
## good with eskk.vim
#on_if = 'has("python3")'
#on_event = ['InsertCharPre', 'InsertEnter']
#hook_post_source = 'runtime add/deoplete.vim'
#[[plugins]]
#repo = 'SevereOverfl0w/deoplete-github'
#on_ft = ['gitcommit']
#[[plugins]]
#repo = 'wellle/tmux-complete.vim'
#on_ft = 'tmux'
#[[plugins]]
#repo = 'deoplete-plugins/deoplete-zsh'
#on_ft = 'zsh'
#[[plugins]]
#repo = 'ponko2/deoplete-fish'
#on_ft = 'fish'
#[[plugins]]
#repo = 'tenfyzhong/CompleteParameter.vim'
## Enough w/ lsp and snippets?
#on_map = '<Plug>(complete_parameter#'
#hook_add = 'runtime add/CompleteParameter.vim'
# [[plugins]]
# repo = 'mattn/googlesuggest-complete-vim'
# # Complete through https://suggestqueries.google.com/complete/search
# depends = ['webapi-vim']
# # on_func = ['googlesuggest#Complete']
#
#[ Auto Pair ]
[[plugins]]
repo = 'windwp/nvim-ts-autotag'
# Auto close/rename html tag.
# Map to i_> to close tag; use snippets to do it instead.
# InsertLeave to rename tag.
if = 'has("nvim")'
depends = ['nvim-treesitter']
on_ft = [
  'eco',
  'ejs',
  'eruby',
  'html',
  'htmldjango',
  'javascript',
  'javascript.jsx',
  'javascriptreact',
  'jsx',
  'php',
  'svelte',
  'typescript',
  'typescript.tsx',
  'typescriptreact',
  'vue',
  'xml',
]
hook_post_source = 'luafile $DEIN_RC_DIR/treesitter/autotag/pos.lua'
[[plugins]]
repo = 'AndrewRadev/tagalong.vim'
# Automatic change the other of tag-pair with nmap to c/i/a.
if = '!has("nvim")'
on_ft = [
  'html',
  'xml',
  'jsx',
  'eruby',
  'ejs',
  'eco',
  'php',
  'htmldjango',
  'javascript',
  'typescript',
  'javascript.jsx',
  'typescript.tsx',
  'javascriptreact',
  'typescriptreact',
]
on_path = ['\.js$', '\.jsx$', '\.ts$', '\.tsx$']
hook_source = 'runtime source/tagalong.vim'
# [[plugins]]
# # repo = 'alvan/vim-closetag'
# # Html; Auto Close for html-tags
# hook_add = 'runtime source/closetag.vim'
# on_ft = ['html', 'xml', 'jsx']
#[[plugins]]
#repo = 'jiangmiao/auto-pairs'
#on_event = ['InsertEnter']
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['TextChangedI', 'CmdlineEnter']
# on_func = 'lexima#'
hook_add = 'source $DEIN_RC_DIR/lexima/add.vim'
hook_source = 'source $DEIN_RC_DIR/lexima/sou.vim'
hook_post_source = 'runtime post/lexima.vim'
#[[plugins]]
#repo = 'mattn/vim-lexiv'
## seems WIP
## small implementation of lexima
#on_func = ['lexiv#']
#hook_add = 'runtime add/lexiv.vim'
#[[plugins]]
#repo = 'tpope/vim-endwise'
#if = "&ft ==# 'lua\|elixir\|ruby\|crystal\|sh\|zs\|hvb\|vbnet\|aspvbs\|vim\|c\|cpp\|xdefaults\|haskell\|objc\|make\|verilog\|matlab\|htmljinja\|jinja.html\|snippets'"
#on_event = ['InsertEnter']

#[ Unicode ]
[[plugins]]
repo = 'chrisbra/unicode.vim'
# Note: on_map of unicode.vim is useless; maybe because they are imap.
on_map = {i = ['<Plug>(UnicodeComplete)', '<Plug>(DigraphComplete)']}
hook_post_source = 'runtime add/unicode.vim'
#[[plugins]]
#repo = 'arthurxavierx/vim-unicoder'
#on_map = {i = '<Plug>(unicoder-'}

#[ Thesaurus ]
[[plugins]]
repo = 'Ron89/thesaurus_query.vim'
on_cmd = 'Thesaurus'
hook_add = 'runtime add/thesaurus_query.vim'

#[ Spell ]
#[[plugins]]
#repo = 'kamykn/spelunker.vim'
#on_map = {ni = '<Plug>(spelunker-'}
#hook_source = 'runtime source/spelunker.vim'
# [[plugins]]
# repo = 'rhysd/vim-grammarous'
# # Grammer Check with languagetool (without it, downloaded automatically)
# # `coc-diagnostic` can run languagetool, too.
# on_cmd = 'GrammarousCheck'
# hook_source = 'runtime source/grammarous.vim'
# [[plugins]]
# repo = 'shinglyu/vim-codespell'
# # # only supports python?
# # on_cmd = 'Codespell'
# hook_add = 'runtime add/codespell.vim'
#[[plugins]]
#repo = 'tweekmonster/dyslexic.vim'
## Spell checker according to <cword>.
#on_cmd = 'Dyslexic'
#hook_add = 'runtime dyslexic.vimrc'

#[[plugins]]
#repo = 'reedes/vim-lexical'
## spell-check up to the language
#on_func =  ['lexical#init']
#hook_source = 'runtime source/lexical.vim'
#[ CapsLock ]
#[[plugins]]
#repo = 'tpope/vim-capslock'
## Doesn't Work
#on_event = ['InsertEnter', 'CmdlineEnter']
#hook_post_source = 'runtime add/capslock.vim'
#[[plugins]]
#repo = 'mattn/vim-switch-esc-capslock'
#### For Windows?
#on_event = ['InsertEnter', 'CmdlineEnter']
#hook_post_source = 'runtime add/switch-esc-capslock.vim'

