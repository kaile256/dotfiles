# From: dein/dein.vim

#[ built-in LSP ]
[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = ['BufRead']
hook_post_source = 'luafile $DEIN_LUA_DIR/lspconfig/pos.lua'
[[plugins]]
repo = 'gfanto/fzf-lsp.nvim'
if = 'executable("fzf") && has("nvim")'
# The dependency on fzf.vim is to copy its settings.
depends = ['nvim-lspconfig', 'fzf.vim']
on_source = ['nvim-lspconfig']
[[plugins]]
repo = 'lspcontainers/lspcontainers.nvim'
# Run and connect LS in docker container(s); thus, neovim won't reduce its
# performance because of LS.
# Supported LSs: lspcontainers/lspcontainers.nvim/lua/lspcontainers/init.lua
if = 'has("nvim")'
depends = ['nvim-lspconfig']
on_source = ['nvim-lspconfig']
[[plugins]]
repo = 'ray-x/lsp_signature.nvim'
depends = ['nvim-lspconfig']
on_lua = ['lsp_signature']
[[plugins]]
repo = 'kosayoda/nvim-lightbulb'
# Notify in signcolumn when code-actions are available on the cursor position.
on_lua = ['nvim-lightbulb']
# [[plugins]]
# repo = 'tamago324/nlsp-settings.nvim'
# # Let us write config in json like coc.nvim.
# [[plugins]]
# repo = 'glepnir/lspsaga.nvim'
# # Deal with built-in LSP in floating window.
# if = 'has("nvim")'
# depends = ['nvim-lspconfig']
# on_lua = ['lspsaga']
# on_cmd = ['Lspsaga']
# [[plugins]]
# repo = 'kabouzeid/nvim-lspinstall'
# # Install binaries into $XDG_DATA_HOME/nvim/lspinstall.
# if = 'has("nvim")'
# depends = ['nvim-lspconfig']
# on_cmd = ['LspInstall', 'LspUninstall']
#
#[ coc.nvim ]
# [[plugins]]
# repo = 'neoclide/coc.nvim'
# # Branch: neoclide/coc.nvim_release; no src/, but build/.
# rev = 'release'
# if = '!exists("g:vscode")'
# on_if = "&buftype ==# ''"
# on_event = 'BufRead'
# hook_add = 'source $DEIN_RC_DIR/coc/add.vim'
# hook_source = 'source $DEIN_RC_DIR/coc/sou.vim'
# [[plugins]]
# repo = 'antoinemadec/coc-fzf'
# # Useless to select another options.
# on_cmd = ['CocFzfList']
# hook_add = 'runtime add/coc-fzf.vim'
# [[plugins]]
# repo = 'neoclide/coc-prettier'
# # Note: `CocInstall coc-prettier` fails and exit 1.
# build = '''
# # Ref: "Unable to install coc-prettier" @ neoclide/coc-prettier/issues/57
# yarn install --frozen-lockfile
# '''
# [[plugins]]
# repo = 'kizza/actionmenu.nvim'
# if = 'has("nvim")'
# # Provides coc.nvim actionmenu features for such as 'codeAction'.
# on_source = 'coc.nvim'
# hook_post_source = 'runtime add/actionmenu.vim'
#[[plugins]]
#repo = 'neoclide/redismru.vim'
# Redis; Remote Dictionary Server
#if = 'executable("redis")'
#on_source = 'denite.nvim'
#hook_post_source = 'runtime add/redismru.vim'
[[plugins]]
repo = 'pwntester/codeql.nvim'
if = 'has("nvim")'
# Integrate with 'neovim/nvim-lsp' or 'coc.nvim'.
on_ft = ['ql']

#[ vim-lsp ]
#[[plugins]]
#repo = 'prabirshrestha/vim-lsp'
## Written in Pure viml
##hook_add = 'runtime add/lsp.vim'
#[[plugins]]
#repo = 'prabirshrestha/async.vim'
#on_source = 'vim-lsp'
#[[plugins]]
#repo = 'prabirshrestha/asyncomplete.vim'
#on_event = 'BufRead'
#hook_post_source = 'runtime add/asyncomplete.vim'
#[[plugins]]
#repo = 'prabirshrestha/asyncomplete-lsp.vim'
#on_event = 'BufRead'
#hook_post_source = 'runtime add/asyncomplete-lsp.vim'
#[[plugins]]
#repo = 'autozimu/LanguageClient-neovim'
## Note: Written in Rust.
#rev = 'next'
#build = 'bash install.sh'
#on_event = 'BufRead'
#hook_add = 'runtime add/LanguageClient.vim'
#[[plugins]]
#repo = 'OmniSharp/omnisharp-vim'
#on_event = 'BufRead'
#hook_add = 'runtime add/omnisharp.vim'

#[ Format ]
#[[plugins]]
#repo = 'rhysd/vim-clang-format'
## only formats written headers; not insert new
#on_ft = ['c', 'cpp', 'objc', 'javascript', 'java', 'typescript', 'protobuf']
#on_source = 'runtime source/clang-format.vim'
