# From: dein/dein.vim

[[plugins]]
repo = 'puremourning/vimspector'
# Note: Debug adapter can be installed in vscode.
#
# Document: https://puremourning.github.io/vimspector/
# Support:
#   python2/3, TCL, Bash
#   Any languages supported by gdb or lldb like C, C++
# Known to work:
#   Java (see caveats)
#   C# (with dotnet core)
#   Go (requires Delve, install it yourself)
#   Node.js (nodes should be less than 12)
#   Anything running in chrome like javascript
build = '''
# --force-all contains an error; actually, --force-enable-node has a bug:
#   Traceback (most recent call last):
#     File "/home/kaile256/.cache/dein/repos/github.com/puremourning/vimspector/inst
#   all_gadget.py", line 661, in <module>
#       raise RuntimeError( 'Failed to install gadgets: {}'.format(
#   RuntimeError: Failed to install gadgets: vscode-node-debug2
#
# --force-enable-csharp installs vscode-mono-debug

./install_gadget.py \
  --force-enable-chrome \
  --force-enable-csharp \
  --force-enable-php \
  --force-enable-java \
  --all

# ./install_gadget.py --force-all

'''
on_func = 'vimspector#'
on_map = '<Plug>Vimspector'
on_cmd = 'Vimspector'
# Configuration:
#   default adapters are configured in .gadgets.json
#   .gadgets.json only contains 'adapters' without 'configurations'
#   so that create a .vimspector.json to use vimspector at all.
# TODO: install all the adapters on DAP respectively with dein
hook_add = 'runtime add/vimspector.vim'
hook_source = 'runtime source/vimspector.vim'
hook_post_source = 'runtime post/vimspector.vim'

#[[plugins]]
#repo = 'mcasper/vim-infer-debugger'
#on_func =  ['AddDebbuger']
#hook_add = 'runtime add/infer-debugger.vim'
#hook_source = 'runtime source/infer-debugger.vim'
[[plugins]]
repo = 'vim-vdebug/vdebug'
# Config: /etc/php/php.ini
# depends on `xdebug`, install it via pecl which is in php-pear (a php repo)
# Documents:
#   A list of all settings:  https://xdebug.org/docs-settings.php
#   A list of all functions: https://xdebug.org/docs-functions.php
#   Profiling instructions:  https://xdebug.org/docs-profiling2.php
#   Remote debugging:        https://xdebug.org/docs-debugger.php
on_cmd = ['Vdebug']
hook_source = 'runtime source/vdebug.vim'

#[ Debug Adopter ]
#[[plugins]]
#repo = 'puremourning/vim-debug-adapter'
## for Vimspector
## requires Vim modification from puremourning's fork; that is, no use for
## Neovim.
#depends = 'vimspector'
#lazy = 0

#[ on GDB ]
# [[plugins]]
# repo = 'sakhnik/nvim-gdb'
# # Works with gdb, ldb, pdb and BashDB.
# if = 'has("nvim")'
# build = 'bash install.sh'
# hook_done_update = 'call remote#host#UpdateRemotePlugins()'
# on_cmd = ['GdbStart', 'GdbStartLLDB', 'GdbStartPDB', 'GdbStartBashDB']
# hook_source = 'runtime source/nvim-gdb.vim'
# hook_post_source = 'runtime post/nvim-gdb.vim'
[[plugins]]
repo = '$VIMRUNTIME/pack/dist/opt/termdebug'
on_cmd = ['Termdebug', 'TermdebugCommand']
[[plugins]]
repo = 'cpiger/NeoDebug'
on_cmd = 'NeoDebug'

#[ on LLDB ]
# [[plugins]]
# repo = 'strottos/vim-padre'
# if = 'has("+job")'
# build = 'bash make'
# on_cmd =  ['PadreDebug', 'PadreBreakpoint']
#[[plugins]]
#repo = 'gilligan/vim-lldb'
## Note: running on python2
#[[plugins]]
#repo = 'dbgx/lldb.nvim'
# requires python2
#[ Stacktrace ]
#[[plugins]]
#repo = 'haya14busa/vim-stacktrace'
## Note: a lot of unknown_functions
#build = 'make'
#on_cmd = ['CStacktraceFromhist', 'LStacktraceFromhist']
#hook_add = 'runtime add/stacktrace.vim'

#[[plugins]]
#repo = 'lacygoill/vim-stacktrace'
## WIP: no use because of the lack of autoload-functions except main()
#on_cmd = 'WTF'
#hook_post_source = 'runtime add/stacktrace.vim'

#[ Test ]
[[plugins]]
repo = 'janko/vim-test'
# run on test file or the last touched test file.
on_cmd = [
  'TestNearest',
  'TestFile',
  'TestSuite',
  'TestLast',
  'TestVisit',
]
hook_source = 'runtime source/test.vim'
[[plugins]]
repo = 'tpope/vim-dispatch'
# async build and test
# shows result in Quickfix
on_cmd = [
  'Dispatch',
  'Make',
  'Focus',
  'Start',
]
hook_add = 'runtime add/dispatch.vim'
hook_source = 'runtime source/dispatch.vim'
[[plugins]]
repo = 'neomake/neomake'
# as a linter, use LSP plugin instead
# shows result in Quickfix
on_cmd = 'Neomake'
on_func = ['neomake#configure#']
hook_source = 'runtime source/neomake.vim'
#hook_post_source = 'runtime post/neomake.vim'
[[plugins]]
repo = 'skywind3000/asynctasks.vim'
on_cmd = ['AsyncTask']

#[ Compiler ]
[[plugins]]
repo = 'vim-scripts/Maven-Compiler'
on_ft = ['java']
