# From: dein/dein.vim

# NOTICE: `on_map` makes no sense for textobj unless you create in add/

[[plugins]]
repo = 'kana/vim-textobj-user'
#on_event = 'BufRead'
on_func = ['textobj#user#plugin']
#hook_add = 'runtime add/textobj-user.vim'

[[plugins]]
repo = 'kana/vim-textobj-function'
# Note: should activates where lsp doesn't provide the kind of textobjects.
# Note: available on vim/java/c, but coc's are better on java; don't know on c
on_ft = ['vim']
#on_map = {xo = '<Plug>(textobj-function-'}
hook_source = 'runtime source/textobj-function.vim'

[[plugins]]
repo = 'kana/vim-textobj-fold'
if = '&foldenable'
on_event = ['BufRead']
#on_source = 'vim-textobj-user'
#hook_add = 'runtime add/textobj-fold.vim'

[[plugins]]
repo = 'kana/vim-textobj-entire'
# For: entire lines of current buffer.
# Note: `on_map` makes no sense in omap.
on_map = {ox = ['<Plug>(textobj-entire']}
hook_add = 'runtime add/textobj-entire.vim'
hook_post_source = 'runtime post/textobj-entire.vim'
[[plugins]]
repo = 'glts/vim-textobj-comment'
on_event = ['BufRead']
#hook_add = 'runtime add/textobj-comment.vim'

#[[plugins]]
#repo = 'eikendev/vim-textobj-names'
## For: names separated by delimiters like -, _, /, @ or #.
#on_event = 'BufRead'
#hook_add = 'runtime add/textobj-names.vim'

#[[plugins]]
#repo = 'coderifous/textobj-word-column.vim'
## Note: Use it with blockwise-visual mode.
#on_event = 'BufRead'
#hook_add = '''
#let g:skip_default_textobj_word_column_mappings = 1
#" Mnemonic: Queue
#xnoremap <silent> aq :<C-u>call TextObjWordBasedColumn("aw")<cr>
#xnoremap <silent> iq :<C-u>call TextObjWordBasedColumn("iw")<cr>
#onoremap <silent> aq :call TextObjWordBasedColumn("aw")<cr>
#onoremap <silent> iq :call TextObjWordBasedColumn("iw")<cr>
#xnoremap <silent> aQ :<C-u>call TextObjWordBasedColumn("aW")<cr>
#xnoremap <silent> iQ :<C-u>call TextObjWordBasedColumn("iW")<cr>
#onoremap <silent> aQ :call TextObjWordBasedColumn("aW")<cr>
#onoremap <silent> iQ :call TextObjWordBasedColumn("iW")<cr>
#'''

#[[plugins]]
#repo = 'sgur/vim-textobj-parameter'
#on_event = ['BufRead', 'TextChanged']

#[[plugins]]
#repo = 'kana/vim-textobj-indent'
#on_map = '<Plug>(textobj-indent-'
#hook_add = '''
#let g:textobj_indent_no_default_key_mappings = 1
#ai  <Plug>(textobj-indent-a)
#ii  <Plug>(textobj-indent-i)
#aI  <Plug>(textobj-indent-same-a)
#iI  <Plug>(textobj-indent-same-i)
#'''

[[plugins]]
repo = 'saaguero/vim-textobj-pastedtext'
# Note: no use because it is mapped after the plugin is loaded.
#on_map = '<Plug>(textobj-pastedtext'
on_event = ['TextChanged']
hook_source = 'runtime source/textobj-pastedtext.vim'

[[plugins]]
repo = 'amerlyq/vim-textobj-keyvalue'
on_map = {ox = ['<Plug>(textobj-key-', '<Plug>(textobj-value-']}
hook_add = 'runtime add/textobj-keyvalue.vim'
#[[plugins]]
#repo = 'vimtaku/vim-textobj-keyvalue'
## Possibly better on Vimscript, but the name is duplicated to that of amerlyq.
#hook_add = 'runtime add/textobj-keyvalue.vim'
#[ on FileType ]
#[[plugins]]
#repo = 'bps/vim-textobj-python'
#on_ft = 'python'
#hook_post_source = ':TextobjPythonDefaultKeyMappings!'

#[[plugins]]
#repo = 'coachshea/vim-textobj-markdown'
## Note: enough w/ vim-textobj-fold
#on_ft = ['markdown']
#[ Git ]
[[plugins]]
repo = 'rhysd/vim-textobj-conflict'
on_map = {ox = ['<Plug>(textobj-conflict-']}
hook_add = 'runtime add/textobj-conflict.vim'
