# From: dein/dein.vim

[[plugins]]
repo = 'dyng/ctrlsf.vim'
# Get grep-results under project-root, or current directory, into a buffer to
# edit. Async.
on_map = {nx = ['<Plug>CtrlSF']}
on_cmd = ['CtrlSF']
on_func = ['ctrlsf#comp#Completion']
hook_add = 'runtime add/ctrlsf.vim'
hook_source = 'runtime source/ctrlsf.vim'
hook_post_source = 'runtime post/ctrlsf.vim'

#[ Fuzzy Finder ]
[[plugins]]
repo = 'junegunn/fzf'
#[ Note: :Files in fzf.vim is the same as :FZF.
on_event = 'CmdLineEnter'
[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = ['CmdLineEnter']
hook_add = 'runtime add/fzf.vim'
hook_source = 'runtime source/fzf.vim'
hook_post_source = 'runtime post/fzf.vim'
[[plugins]]
repo = 'fszymanski/fzf-quickfix'
depend = 'fzf.vim'
on_cmd = ['Quickfix']
#[[plugins]]
#repo = 'dominickng/fzf-session.vim'
#on_cmd = ['Session', 'Sessions']
#hook_source = 'runtime source/fzf-session.vim'
#[[plugins]]
#repo = 'yuki-ycino/fzf-preview.vim'
## too many settings to imitate the config of fzf.vim
#on_cmd = 'FzfPreview.*'
#hook_add = 'runtime add/fzf-preview.vim'
#hook_source = 'runtime source/fzf-preview.vim'
[[plugins]]
repo = 'krzbe/fzf-git-submodules'
on_func = ['fzf#submodules#']
on_cmd = ['Components']
hook_add = 'runtime add/fzf-git-submodules.vim'
[[plugins]]
repo = 'ichihara-3/fzf-gitswitch.vim'
on_cmd = ['Branches']
on_map = {nx = ['<Plug>(fzf_gs']}
hook_add = 'runtime add/fzf-gitswitch..vim'
#[[plugins]]
#repo = 'srstevenson/vim-picker'
# fzy's wrapper for vim
#on_event = ['BufRead']
[[plugins]]
repo = 'liuchengxu/vim-clap'
build = 'bash install.sh'
on_cmd = 'Clap'
hook_source = 'runtime source/clap.vim'

#[ Filer ]
[[plugins]]
repo = 'ms-jpq/chadtree'
if = 'has("nvim")'
on_cmd = 'CHADopen'
# Note: hook_source is useless because of lua plugin.
hook_add = 'runtime add/chadtree.vim'
hook_done_update = 'call remote#host#UpdateRemotePlugins()'
[[plugins]]
repo = 'zgpio/tree.nvim'
# Note: written in cpp!
rtp = 'runtime'
build = '''
  cmake \
      -DBoost_USE_STATIC_LIBS=ON \
      -DCMAKE_BUILD_TYPE=Release \
      -S . \
      -B ./runtime/bin

  make -C ./runtime/bin install
'''
on_cmd = 'Tree'
hook_add = 'runtime add/tree.vim'
hook_source = 'runtime source/tree.vim'
#[[plugins]]
#repo = 'skanehira/popupfiles.vim'
## Ref: https://qiita.com/gorilla0513/items/fa4b401e7264a31868b9
#on_cmd = 'PopupFiles'
#[[plugins]]
#repo = 'cocopon/vaffle.vim'
#on_if = 'has("python3")'
#hook_post_source = 'runtime add/vaffle.vim'

# [[plugins]]
# repo = 'vifm/vifm.vim'
# # An interface for vifm
# if = 'executable("vifm")'
# on_cmd = ['Vifm', 'EditVifm', 'SplitVifm', 'VsplitVifm', 'TabVifm']
# hook_add = 'runtime add/vifm.vim'
# [[plugins]]
# repo = 'mcchrish/nnn.vim'
# # An interface for nnn
# # Note: often fails to render on Neovim.
# if = 'executable("nnn") && !has("nvim")'
# on_func = 'nnn#'
# # on_cmd = 'NnnPicker'
# # hook_add = 'runtime add/nnn.vim'

#[ Filer.fern ]
# [[plugins]]
# repo = 'lambdalisue/fern.vim'
# # Note: hard to see redraw on changing directory.
# on_cmd = 'Fern'
# hook_add = 'runtime add/fern.vim'
# hook_source = 'runtime source/fern.vim'
# [[plugins]]
# repo = 'lambdalisue/fern-renderer-devicons.vim'
# on_source = 'fern.vim'
# hook_source = 'let g:fern#renderer = "devicons"'

#[ Filer.Defx ]
[[plugins]]
repo = 'Shougo/defx.nvim'
# Error: After the second opening a buffer from defx-buffer, Vim comes to open
# an empty buffer missing expected path.
# rev = 'c06d2dd685e29493e3df9b97db62c8439f2276a'
on_cmd = 'Defx'
# Ref: ftplugin/defx
hook_add = 'runtime add/defx.vim'
hook_post_source = 'runtime post/defx.vim'
[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = 'defx.nvim'
hook_post_source = 'runtime post/defx-git.vim'
[[plugins]]
repo = 'kristijanhusak/defx-icons'
on_source = 'defx.nvim'
hook_source = 'runtime source/defx-icons.vim'

# #[ Filer.Dirvish ]
# [[plugins]]
# repo = 'justinmk/vim-dirvish'
# on_cmd = 'Dirvish'
# hook_post_source = 'runtime add/dirvish.vim'
# [[plugins]]
# repo = 'bounceme/remote-viewer'
# on_path = ['^ssh://', '^ftp://']
# [[plugins]]
# repo = 'kristijanhusak/vim-dirvish-git'
# on_source = 'vim-dirvish'
# [[plugins]]
# repo = 'fsharpasharp/vim-dirvinist'
# on_source = 'vim-dirvish'
#
##[ Ranger ]
[[plugins]]
repo = 'kevinhwang91/rnvimr'
# Ranger in a floating window.
if = 'has("nvim") && executable("ranger") && executable("ueberzug")'
on_func = 'rnvimr#'
on_cmd = 'RnvimrToggle'
hook_add = 'runtime add/rnvimr.vim'
hook_source = 'runtime source/rnvimr.vim'
#[[plugins]]
#repo = 'Lokaltog/neoranger'
## Note: only one pane is in use; can't call it a ranger.
#on_event = 'BufRead'
#hook_add = 'runtime add/neoranger.vim'

#[[plugins]]
# repo = 'ipod825/vim-netranger'
# # Browser for system/cloud storage
# on_cmd = ['NETRemoteList', 'NETRemotePush', 'NETRemotePull']
# hook_add = 'runtime add/netranger.vim'

#[[plugins]]
#repo = 'rafaqz/ranger.vim'
### semms only call the external ranger.
#on_event = 'BufRead'
#hook_post_source = 'runtime add/ranger.vim'
# [[plugins]]
# repo = 'francoiscabrol/ranger.vim'
# # semms only call the external ranger.
# # on_event = 'Ranger'
# hook_add = 'runtime add/ranger.vim'

#[ CTags/global ]
#[[plugins]]
#repo = 'ludovicchabant/vim-gutentags'
## Some similar plugins ("vim-tags", "vim-autotag", "vim-automatic-ctags", etc.)
## all fail on one or more of the requirements
## * No other dependency than Vim: no Python, Ruby, or whatever.
## * Cross-platform: should work on at least Mac and Windows.
## * Incremental tags generation: don't re-generate the whole project all the
##   time.
## * External process management: if the ctags process is taking a long time,
##   don't run another one because I saved the file again.
## * Keep the tag file consistent: don't just append the current file's tags to
##   the tag file, otherwise you will still "see" tags for deleted or renamed
##   classes and functions.
## * Automatically create the tag file on `BufWritePost`
#on_cmd = ['GutentagsUpdate']
#on_source = ['gutentags_plus']
#hook_source = 'runtime source/gutentags.vim'
#[[plugins]]
#repo = 'skywind3000/gutentags_plus'
#on_cmd = 'GscopeFind'
# [[plugins]]
# repo = 'jsfaint/gen_tags.vim'
# # Override &cscopeprg.
# if = 'executable("gtags") || executable("ctags")'
# on_cmd = 'GenGTAGS'
# hook_source = 'runtime source/gen_tags.vim'
#
#[[plugins]]
#repo = 'SpaceVim/gtags.vim'
## Only for SpaceVim? E117: Unknown function: gtags#update
## 1. generate gtags file automatically
## 2. quickfix list support
## 3. A fuzzy finder souces for some plugins:
##          denite, unite, fzf, leader-f, fzy
#on_event = 'BufRead'
#hook_post_source = 'runtime add/gtags.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'Tagbar'
hook_add = 'runtime add/tagbar.vim'
hook_source = 'runtime source/tagbar.vim'

[[plugins]]
repo = 'liuchengxu/vista.vim'
# Note: supports lsp via such plugins as coc, vim-lsp.
# Note: sort tags on the role, like function, struct, variable and so on.
on_cmd = 'Vista'
hook_add = 'runtime add/vista.vim'
hook_source = 'runtime source/vista.vim'
hook_post_source = 'runtime post/vista.vim'

#[ Marks ]
#[[plugins]]
#repo = 'MattesGroeger/vim-bookmarks'
## ???
#on_cmd = ['BookmarkAnnotate', 'BookmarkShowAll', 'BookmarkNext', 'BookmarkPrev']
#hook_add = 'runtime add/bookmarks.vim'

#[[plugins]]
#repo = 'jacquesbh/vim-showmarks'
#on_map = ['m','`',"'",'<space>']
#hook_add = 'runtime add/showmarks.vim'

#[ Alternate File ]
[[plugins]]
repo = 'kana/vim-altr'
on_map = {nx = '<Plug>(altr-'}
hook_add = 'runtime add/altr.vim'
hook_post_source = 'runtime post/altr.vim'
#[[plugins]]
#repo = 'compactcode/alternate.vim'
#on_func = [
#  'alternate#FindAlternate',
#  'alternate#FindTest',
#]
#hook_add = 'runtime add/alternate.vim'

#[ Project ]
#[[plugins]]
#repo = 'tpope/vim-projectionist'
#on_event = ['BufRead']
## Note: this plugin provides no commands before its autocmds provide them.
##on_cmd = [
##  'E', 'S', 'V', 'T',
##  'A', 'AS', 'AV', 'AT',
##  'Edoc', 'Eplugin',
##]
#hook_source = 'runtime source/projectionist.vim'
