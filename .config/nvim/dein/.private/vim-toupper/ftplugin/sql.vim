" Note: This file starts from alcesleo/vim-uppercase-sql

let s:sql_words = []

if &ft ==# 'mysql'
  let s:sql_words += [
        \ 'identified',
        \ 'load',
        \ 'use',
        \ ]
endif

let s:sql_words += [
      \ 'absolute',
      \ 'action',
      \ 'add',
      \ 'after',
      \ 'all',
      \ 'allocate',
      \ 'alter',
      \ 'and',
      \ 'any',
      \ 'are',
      \ 'array',
      \ 'as',
      \ 'asc',
      \ 'asensitive',
      \ 'assertion',
      \ 'asymmetric',
      \ 'at',
      \ 'atomic',
      \ 'authorization',
      \ 'avg',
      \ ]

let s:sql_words += [
      \ 'before',
      \ 'begin',
      \ 'between',
      \ 'bigint',
      \ 'binary',
      \ 'bit',
      \ 'bit_length',
      \ 'blob',
      \ 'boolean',
      \ 'both',
      \ 'breadth',
      \ 'by',
      \ ]

let s:sql_words += [
      \ 'call',
      \ 'called',
      \ 'cascade',
      \ 'cascaded',
      \ 'case',
      \ 'cast',
      \ 'catalog',
      \ 'char',
      \ 'char_length',
      \ 'character',
      \ 'character_length',
      \ 'check',
      \ 'clob',
      \ 'close',
      \ 'coalesce',
      \ 'collate',
      \ 'collation',
      \ 'column',
      \ 'commit',
      \ 'condition',
      \ 'connect',
      \ 'connection',
      \ 'constraint',
      \ 'constraints',
      \ 'constructor',
      \ 'contains',
      \ 'continue',
      \ 'convert',
      \ 'corresponding',
      \ 'count',
      \ 'create',
      \ 'cross',
      \ 'cube',
      \ 'current',
      \ 'current_date',
      \ 'current_default_transform_group',
      \ 'current_path',
      \ 'current_role',
      \ 'current_time',
      \ 'current_timestamp',
      \ 'current_transform_group_for_type',
      \ 'current_user',
      \ 'cursor',
      \ 'cycle',
      \ ]

let s:sql_words += [
      \ 'data',
      \ 'date',
      \ 'day',
      \ 'deallocate',
      \ 'dec',
      \ 'decimal',
      \ 'declare',
      \ 'default',
      \ 'deferrable',
      \ 'deferred',
      \ 'delete',
      \ 'depth',
      \ 'deref',
      \ 'desc',
      \ 'describe',
      \ 'descriptor',
      \ 'deterministic',
      \ 'diagnostics',
      \ 'disconnect',
      \ 'distinct',
      \ 'do',
      \ 'domain',
      \ 'double',
      \ 'drop',
      \ 'dynamic',
      \ ]

let s:sql_words += [
      \ 'each',
      \ 'element',
      \ 'else',
      \ 'elseif',
      \ 'end',
      \ 'equals',
      \ 'escape',
      \ 'except',
      \ 'exception',
      \ 'exec',
      \ 'execute',
      \ 'exists',
      \ 'exit',
      \ 'external',
      \ 'extract',
      \ ]

let s:sql_words += [
      \ 'false',
      \ 'fetch',
      \ 'filter',
      \ 'first',
      \ 'float',
      \ 'for',
      \ 'foreign',
      \ 'found',
      \ 'free',
      \ 'from',
      \ 'full',
      \ 'function',
      \ ]

let s:sql_words += [
      \ 'general',
      \ 'get',
      \ 'global',
      \ 'go',
      \ 'goto',
      \ 'grant',
      \ 'group',
      \ 'grouping',
      \ ]

let s:sql_words += [
      \ 'handler',
      \ 'having',
      \ 'hold',
      \ 'hour',
      \ ]

let s:sql_words += [
      \ 'identity',
      \ 'if',
      \ 'immediate',
      \ 'in',
      \ 'indicator',
      \ 'initially',
      \ 'inner',
      \ 'inout',
      \ 'input',
      \ 'insensitive',
      \ 'insert',
      \ 'int',
      \ 'integer',
      \ 'intersect',
      \ 'interval',
      \ 'into',
      \ 'is',
      \ 'isolation',
      \ 'iterate',
      \ ]

let s:sql_words += [
      \ 'join',
      \ 'key',
      \ 'language',
      \ 'large',
      \ 'last',
      \ 'lateral',
      \ 'leading',
      \ 'leave',
      \ 'left',
      \ 'level',
      \ 'like',
      \ 'local',
      \ 'localtime',
      \ 'localtimestamp',
      \ 'locator',
      \ 'loop',
      \ 'lower',
      \ ]

let s:sql_words += [
      \ 'map',
      \ 'match',
      \ 'max',
      \ 'member',
      \ 'merge',
      \ 'method',
      \ 'min',
      \ 'minute',
      \ 'modifies',
      \ 'module',
      \ 'month',
      \ 'multiset',
      \ 'names',
      \ 'national',
      \ 'natural',
      \ 'nchar',
      \ 'nclob',
      \ 'new',
      \ 'next',
      \ 'no',
      \ 'none',
      \ 'not',
      \ 'null',
      \ 'nullif',
      \ 'numeric',
      \ ]

let s:sql_words += [
      \ 'object',
      \ 'octet_length',
      \ 'of',
      \ 'old',
      \ 'on',
      \ 'only',
      \ 'open',
      \ 'option',
      \ 'or',
      \ 'order',
      \ 'ordinality',
      \ 'out',
      \ 'outer',
      \ 'output',
      \ 'over',
      \ 'overlaps',
      \ ]

let s:sql_words += [
      \ 'pad',
      \ 'parameter',
      \ 'partial',
      \ 'partition',
      \ 'path',
      \ 'position',
      \ 'precision',
      \ 'prepare',
      \ 'preserve',
      \ 'primary',
      \ 'prior',
      \ 'privileges',
      \ 'procedure',
      \ 'public',
      \ 'range',
      \ 'read',
      \ 'reads',
      \ 'real',
      \ 'recursive',
      \ 'ref',
      \ 'references',
      \ 'referencing',
      \ 'relative',
      \ 'release',
      \ 'repeat',
      \ 'resignal',
      \ 'restrict',
      \ 'result',
      \ 'return',
      \ 'returns',
      \ 'revoke',
      \ 'right',
      \ 'role',
      \ 'rollback',
      \ 'rollup',
      \ 'routine',
      \ 'row',
      \ 'rows',
      \ ]

let s:sql_words += [
      \ 'savepoint',
      \ 'schema',
      \ 'scope',
      \ 'scroll',
      \ 'search',
      \ 'second',
      \ 'section',
      \ 'select',
      \ 'sensitive',
      \ 'session',
      \ 'session_user',
      \ 'set',
      \ 'sets',
      \ 'signal',
      \ 'similar',
      \ 'size',
      \ 'smallint',
      \ 'some',
      \ 'space',
      \ 'specific',
      \ 'specifictype',
      \ 'sql',
      \ 'sqlcode',
      \ 'sqlerror',
      \ 'sqlexception',
      \ 'sqlstate',
      \ 'sqlwarning',
      \ 'start',
      \ 'state',
      \ 'static',
      \ 'submultiset',
      \ 'substring',
      \ 'sum',
      \ 'symmetric',
      \ 'system',
      \ 'system_user',
      \ ]

let s:sql_words += [
      \ 'table',
      \ 'tablesample',
      \ 'temporary',
      \ 'then',
      \ 'time',
      \ 'timestamp',
      \ 'timezone_hour',
      \ 'timezone_minute',
      \ 'to',
      \ 'trailing',
      \ 'transaction',
      \ 'translate',
      \ 'translation',
      \ 'treat',
      \ 'trigger',
      \ 'trim',
      \ 'true',
      \ ]

let s:sql_words += [
      \ 'under',
      \ 'undo',
      \ 'union',
      \ 'unique',
      \ 'unknown',
      \ 'unnest',
      \ 'until',
      \ 'update',
      \ 'upper',
      \ 'usage',
      \ 'user',
      \ 'using',
      \ ]

let s:sql_words += [
      \ 'value',
      \ 'values',
      \ 'varchar',
      \ 'varying',
      \ 'view',
      \ 'when',
      \ 'whenever',
      \ 'where',
      \ 'while',
      \ 'window',
      \ 'with',
      \ 'within',
      \ 'without',
      \ 'work',
      \ 'write',
      \ 'year',
      \ 'zone',
      \ ]

call toupper#buflocal(s:sql_words)
unlet s:sql_words

