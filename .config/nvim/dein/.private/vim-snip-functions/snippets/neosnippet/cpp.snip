# neosnippet-snippets/cpp.snip

include c.snip
source ns/cpp/*.vim

snippet init
options head
  #include <iostream>
  #include <vector>
  #include <algorithm>

  main${1}

snippet include
alias #in #inc #include
options head
  #include ${1:<iostream>}

snippet iostream
alias io ios ios>
options word
  `NS_cpp_include()`iostream>

snippet vector
alias vec ve
options word
# `NS_cpp_include()`vector>
  vector<${1:int}>

snippet regex
alias re reg
options word
  `NS_cpp_include()`regex>

snippet /*
abbr Comment
alias *
options word indent
  /*${1: comment }*/

snippet using_namespace
alias usn uns
  using namespace ${1:std};

snippet using=
  using ${1:LL} = ${2:long long};

snippet using::
  using ${1:std}::${2:cout};

snippet struct
options word indent
  struct ${1:Struct} {
    $1() {${2:#:Constructor}}
  };

snippet EPS
abbr epsilon for double
alias eps
options head
  constexpr double EPS = 1e-12;

snippet cin
abbr cin >> foo;
alias ci in
  `NS_cpp_cin()`

snippet cout
alias cou co out
  `NS_cpp_cout()`

snippet endl
abbr std::endl;
alias end en
options word
  `NS_cpp_std()`endl

snippet forward
abbr std::forward
alias fo for fow
options word
  `NS_cpp_std`forward

snippet lambda
alias [](){} []
options word
  `search('\a.*\%#', 'nbW') ? '' : '${1:auto ${2:func\}} = '`[](${3:auto n}) {
    ${4:return ret;}
  };

snippet template
abbr template <typename T>
alias tm tem temp
options head
  template <${1:typename} ${2:T}>

snippet distance
abbr distance(a.begin(), a.end())
options word
  distance(${1:a.begin()}, ${2:a.end()})

snippet all
abbr v.begin(), v.end()
options word
   `matchstr(getline('.'), '\a\zeall')`begin(), `matchstr(getline('.'), '(\zs\h\+\ze\.')``matchstr(getline('.'), '\a\zeall')`.end(), ${1}

snippet for++i
abbr for (int x = 0; ...; ++x
options head
  for (int ${1:i} = 0; $1 < ${2:#:max}; ++$1) {
    ${0}
  }

snippet func
abbr int func(int n) {...}
alias fn fu fun
options word indent
# leave 'main' when no main function found.
  `search('int main', 'nw') ? "${1:int} ${2:func}(${3:int n}) ${4:noexcept }{\n${0:TARGET}\n}" : 'main'`


snippet main
options head
# Optimize <iostream> if include it, inserting some lines:
# - cin.tie(0);
# - ios::sync_with_stdio(false);
  int main() {
    ${2:return 0;}
  }
# int main(${1:int argc, char const *argv[]}) {
#   `search('#include <iostream>', 'nbW') && search('using namespace std;', 'nbW') ? "cin.tie(0);\nios::sync_with_stdio(false);\n\n" : ''`${2:return 0;}
# }

snippet gcd
abbr int gcd(int a, int b)
options head
# from /usr/include/c++/10.1.0/bits/stl_algo.h
    template<typename _EuclideanRingElement>
      _GLIBCXX20_CONSTEXPR
      _EuclideanRingElement
      __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
      {
        while (__n != 0)
    {
      _EuclideanRingElement __t = __m % __n;
      __m = __n;
      __n = __t;
    }
        return __m;
      }

snippet math_N_GreatCommonDivisor()
abbr int ngcd(vector<int> a)
alias ngcd
options head
    int res;
    res = a[0];
    for (int i = 1; i < a.size() && res != 1; i++) {
        res = gcd(a[i], res);
        }
        return res;
    }
snippet math_LeastCommonMultiple()
abbr int lcm(int a, int b)
alias lcm
options head
    int lcm(int a, int b) {
        return a / gcd(a, b) * b;
    }
snippet math_N_LeastCommonMultiple()
abbr int nlcm(vector<int> numbers)
alias nlcm
    int nlcm(vector<int> numbers) {
        int res;
        res = numbers[0];
        for (int i = 1; i < numbers.size(); i++) {
        res = lcm(res, numbers[i])
        }
        return res;
    }

snippet is_prime
abbr bool is_prime()
options head word indent
  template <typename T> bool is_prime(T n) {
    if (n == 2)
      return true;
    if (n < 2 || n % 2 == 0)
      return false;
    for (T i = 2; i * i <= n; i += 2) {
      if (n % i == 0)
        return false;
    }
    return true;
  }

snippet print_2D_table
abbr cout << 2D_table()
alias 2d table
options head word indent
  `(indent('.') ? '' : "void print_2D_table(std::vector<std::vector<${1:int}>> $2, char sep) {\n") . (search('using namespace std;', 'nb') ? '' : "using namespace std;\n")`for(int i = 0; i < ${2:table}.size(); ++i) {
      for(int j = 0; j < $2.at(i).size(); ++j) {
        cout << $2.at(i).at(j);
        if (j == $2.at(i).size() - 1)
          cout << '\n';
        else
          cout << '`indent('.') ? "${3:,}" : 'sep'`';
      }
    }`indent('.') ? '' : "\n}"`

snippet math_enum_div
abbr vector<int> enum_div(int n)
options head
  vector<int> enum_div(int n) {
    vector<int> ret;
    for (int i = 1; i*i <= n; ++i) {
      if (n % i == 0) {
        ret.push_back(i);
        if (i != i && i * i != n) {
          ret.push_back(n / i);
        }
      }
    }
    return ret;
  }
snippet count_char_in_string
options head
  int count_char_in_string(string s, char c) {
    return count(s.cbegin(), s.cend(), c);
  }

snippet N
abbr Expand variables from declaration for stdin/stdout
alias n X x A a H h R r
regexp 'cin\|cout'
options word
  `substitute(matchstr(getline(search('\h\+,[a-zA-Z0-9, ]\+;', 'nbW')), '\h\+,[a-zA-Z0-9, ]\+'), ',', ' '. matchstr(getline('.'), '[<>]\{2}'), 'g')`;
