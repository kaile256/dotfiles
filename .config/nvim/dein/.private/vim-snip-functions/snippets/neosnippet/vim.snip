# Sample: Shougo/neosnippet-snippets/neosnippets/vim.snip

snippet scriptencoding utf-8
abbr scriptencoding utf-8
alias sc ut s u scr script utf 8
options head
  scriptencoding utf-8

snippet From
alias From Fr Fro fr fro from
  " From: ${1:toml}
  " ${2:Repo:} ${3:`expand($USER)`/}${4:repo}.vim

  ${0:#:start}

snippet guifg
alias fg gui
  guifg=#000000
snippet guibg
alias bg
  guibg=#000000

snippet fdm=expr on FileType
alias undo unf und
  setl fdm=expr fde=${1:`matchstr(expand('%:t:r'), '.*\ze_fold')`FoldExpr}(v:lnum)
  if exists('b:undo_ftplugin')
    let b:undo_ftplugin .= ' | '
  else
    let b:undo_ftplugin = ''
  endif
  let b:undo_ftplugin .= 'setl ${2:fdm< fde<}'

delete command
snippet command
abbr command! -bar -nargs=* Command :do something
alias com cmd comm co
  command! -bar ${1:-nargs=*} ${2:#:Command Name} :${3:#:Commands}

snippet augroup
abbr augroup ... augroup END
alias au aug augr
options indent
  augroup ${1:my}${2:`snip#vim#path_root_to_file()`}
    au!
    au ${3:BufNewFile,BufRead} ${4:*} ${5}
  augroup END

snippet function
alias fu fun func function
  function! ${1:`snip#vim#prefix_for_function()`}${2:#:do}(${3:#:args}) abort "{{{${8:1}
  endfunction

snippet redir
alias re red rd
options head
  redir ${1:=>} ${2:#: =>: var | >: file | @a: register a}
  ${4}
  redir END

snippet noremap
alias no
  ${0:n}noremap ${1:<silent>} ${2} ${4::<c-u>}${3}${4:<cr>}

snippet noreabbrev
alias ab abb abr abbr
  ${3:c}noreabbr <expr> '${1}' (getcmdtype() == ':' && getcmdline() =~# '^$1$')? '${2}' : '$1'
snippet cnoreabbrev
alias cn cno cna cnore cnoreab cnoreabbr
  cnoreabbr <expr> ${1} (getcmdtype() == ':' && getcmdline() =~# '^$1$')? '${2}' : '$1'

snippet <c-\><c-n>
  <c-\><c-n>

snippet tnoremap
alias tn tno tnor tnore tnorem tnorema tnoremap
  tnoremap ${1:<silent>} ${2} <c-\><c-n>:${0} <cr>

snippet compiler
abbr Set up complier
alias comp
options head word indent
  let s:cpo_save = &cpo
  set cpo&vim

  if exists('b:current_compiler')
    finish
  endif
  let b:current_compiler = '${1:gcc}'

  let s:opt = [
        \ '-o\ %:t:r',
        \ ]

  let s:makeprg = ["${2:gcc}", '%:p'] + s:opt

  exe 'CompilerSet makeprg='. join(s:makeprg, '\ ')
  unlet s:opt s:makeprg

  CompilerSet errorformat=
        \%*[^\"]\"%f\"%*\\D%l:%c:\ %m,
        \%*[^\"]\"%f\"%*\\D%l:\ %m,
        \\"%f\"%*\\D%l:%c:\ %m,
        \\"%f\"%*\\D%l:\ %m,
        \%-G%f:%l:\ %trror:\ (Each\ undeclared\ identifier\ is\ reported\ only\ once,
        \%-G%f:%l:\ %trror:\ for\ each\ function\ it\ appears\ in.),
        \%f:%l:%c:\ %trror:\ %m,
        \%f:%l:%c:\ %tarning:\ %m,
        \%f:%l:%c:\ %m,
        \%f:%l:\ %trror:\ %m,
        \%f:%l:\ %tarning:\ %m,
        \%f:%l:\ %m,
        \%f:\\(%*[^\\)]\\):\ %m,
        \\"%f\"\\,\ line\ %l%*\\D%c%*[^\ ]\ %m,
        \%D%*\\a[%*\\d]:\ Entering\ directory\ %*[`']%f',
        \%X%*\\a[%*\\d]:\ Leaving\ directory\ %*[`']%f',
        \%D%*\\a:\ Entering\ directory\ %*[`']%f',
        \%X%*\\a:\ Leaving\ directory\ %*[`']%f',
        \%DMaking\ %*\\a\ in\ %f

  let &cpo = s:cpo_save
  unlet s:cpo_save
