{
  // Ref: $COC_DATA_HOME/extensions/node_modules

  // "suggest.enablePreview" should be true to use preview
  // "coc.preferences.hoverTarget": "preview",
  "coc.preferences.extensionUpdateCheck": "weekly",
  "coc.preferences.formatOnType": true,
  // "coc.preferences.formatOnSaveFiletypes": ["css", "markdown"],
  "coc.preferences.snippets.enable": true,
  "coc.preferences.rootPatterns": [
    ".vim",
    ".git",
    ".hg",
    ".projections.json",
    ".config",
    "dotfiles"
  ],

  // see 'source' in coc-list
  "coc.source.tag.enable": false,
  "coc.source.emoji.filetypes": ["markdown", "config", "dosini"],
  // source.issues depends on coc-git
  "coc.source.issues.priority": 10,
  "coc.source.issues.filetypes": ["gitcommit"],

  "signature.preferShownAbove": false,
  "signature.triggerSignatureWait": 300,

  "refactor.openCommand": "tabe",
  //"refactor.beforeContext": 5,
  //"refactor.afterContext": 5,

  "suggest.highPrioritySourceLimit": 100, // default: 90
  // "suggest.numberSelect": true, // completion with numbers 0 to 9 to select
  "suggest.enablePreview": true,
  "suggest.detailMaxLength": 20,
  "suggest.floatEnable": true,
  // "suggest.minTriggerInputLength": 1,
  "suggest.autoTrigger": "always",
  "suggest.acceptSuggestionOnCommitCharacter": true,
  "suggest.noselect": true,
  "suggest.timeout": 1000,
  "suggest.triggerAfterInsertEnter": false,
  "suggest.triggerCompletionWait": 300,

  "suggest.completionItemKindLabels": {
    "keyword": "\uf1de",
    "variable": "\ue79b",
    "value": "\uf89f",
    "operator": "\u03a8",
    "function": "\u0192",
    "reference": "\ufa46",
    "constant": "\uf8fe",
    "method": "\uf09a",
    "struct": "\ufb44",
    "class": "\uf0e8",
    "interface": "\uf417",
    "text": "\ue612",
    "enum": "\uf435",
    "enumMember": "\uf02b",
    "module": "\uf40d",
    "color": "\ue22b",
    "property": "\ue624",
    "field": "\uf9be",
    "unit": "\uf475",
    "event": "\ufacd",
    "file": "\uf723",
    "folder": "\uf114",
    "snippet": "\ue60b",
    "typeParameter": "\uf728",
    "default": "\uf29c"
  },

  //"codeLens.enable": true,

  //"diagnostic.refreshAfterSave": true,
  //"diagnostic.checkCurrentLine": true,
  "diagnostic.virtualText": false,
  //"diagnostic.messageTarget": "float",
  "diagnostic.highlightOffset": 500,
  "diagnostic.hintSign": ">",

  "session.directory": "~/.local/share/nvim/session/",

  // "snippets.autoTrigger": false,
  // "suggest.snippetIndicator": "...",
  "snippets.extends": {
    "cpp": ["c"],
    "javascriptreact": ["javascript"],
    "typescript": ["javascript"]
  },
  "snippets.userSnippetsDirectory": "~/.vim/UltiSnips",
  "snippets.priority": 100,

  "emmet.includeLanguages": {
    "vue-html": "html",
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },

  "list.autoResize": false,
  "list.maxPreviewHeight": 25,
  "list.source.mru.maxLength": 50,
  "list.source.mru.ignoreGitIgnore": false,
  "list.source.grep.defaultArgs": ["--regex"],

  //"list.nextKeymap": "<C-,>",
  //"list.previousKeymap": "<C-.>",
  "list.insertMappings": {
    // "<C-,>": "normal:j",
    // "<C-.>": "normal:k",

    "<A-t>": "action:tabe",
    "<A-s>": "action:split",
    "<A-v>": "action:vsplit",
    "<CR>": "action:drop",

    "<A-d>": "do:help",
    "<C-c>": "do:exit",
    "<A-h>": "do:exit",
    "<A-j>": "do:exit",
    "<A-l>": "do:exit",
    "<Esc>": "do:toggleMode", // between Insert and Normal mode of CocList.
    "<A-k>": "do:toggleMode",

    "<C-r>": "prompt.insertregister",
    "<C-a>": "prompt.start",
    "<C-e>": "prompt.end",
    "<C-f>": "prompt.right",
    "<C-b>": "prompt.left",
    "<C-d>": "prompt.deletebackward"
  },
  "list.normalMappings": {
    "e": "action:drop",
    "O": "action:vsplit",
    "d": "action:delete",
    "<A-t>": "action:tab",
    "o": "action:split",

    "<C-c>": "do:exit",
    "<A-h>": "do:exit",
    "<A-k>": "do:exit",
    "<A-l>": "do:exit",
    "<A-j>": "do:toggleMode",
    "i": "do.toggleMode"
  },

  "project.dbpath": "~/.local/share/.coc-project",

  "yank.highlight.enable": false,
  "yank.enableCompletion": false,
  "yank.list.maxsize": 150,
  "yank.limit": 50,

  //"highlight.disableLanguages": [""],
  // too high-rate CPU usage
  "highlight.document.enable": false,
  "highlight.colors.enable": true,

  "translator.engines": ["google"],
  "translator.toLang": "ja",
  "translator.maxsize": 200,

  "cSpell.spellCheckDelayMs": 1000,
  "cSpell.allowCompoundWords": true,
  "cSpell.words": [
    // general
    "struct",

    // cli tools
    "cmake",
    "lsof",
    "phpcs",

    // abbreviation
    "isdir",

    // FileType
    "dosini",
    "deno",
    "ccls",
    "objc",
    "objcpp",

    // Vim Plugin name
    "defx",
    "lexima",

    // Cpp
    "iostream",
    "cout",
    "scanf",

    // Python
    "pyperclip",
    "qute",

    // LSP
    "vimlsp",
    "cquery",
    "intelephense",
    "dartfmt",
    "hlint",

    "golint",
    "gofumpt",
    "gopls",

    "mypy",
    "yapf",
    "pylint",
    "pydocStyle"
  ],

  "cSpell.ignoreRegExpList": [
    // Note: Both '\s' and '\S' is invalid here.

    // Regexp
    "[^ \t]*([^\t])?",

    // repo name like foo/bar
    "[^/]+/[^/]+",

    // Where person name appear
    "maintainer.*",

    // Unicode
    "\\u[0-9a-f]+",

    // Cpp
    " <cstd.+> ",

    // Vim
    ".abbr ",
    "vs(plit)?",
    "tabe(dit)?",
    // prefix for autoload-function
    " .+#"
  ],

  "explorer.keyMappings": {
    "k": "nodePrev",
    "j": "nodeNext",

    "*": "toggleSelection",
    "<tab>": "actionMenu",

    "zo": "expand",
    "zO": "expand:recursive",
    "zc": "collapse",
    "zC": "collapse:recursive",
    "za": ["expanded?", "collapse", "expand"],
    "zA": ["expanded?", "collapse:recursive", "expand:recursive"],

    "zU": "expand:compact",

    "zr": "expand:recursive",
    "zm": "collapse:recursive",

    "h": "gotoParent",
    "l": "open",

    "+": ["toggleSelection", "normal:j"],
    "-": ["toggleSelection", "normal:k"],

    "J": "normal:J",
    "K": "normal:K",

    "<CR>": "open:previousWindow",
    "<C-j>": "open:previousWindow",

    "o": "open:split:intelligent",
    "O": "open:vsplit",
    "gO": "open:tab",

    "E": "openInVsplit",
    "t": "openInTab",
    "<bs>": "gotoParent",

    "y": "copyFilepath", // to clipboard
    "Y": "copyFilename", // to clipboard

    "cc": "copyFile",
    "x": "cutFile",
    "p": "pasteFile",

    "D": "delete",
    "\\D": "deleteForever",

    "%": "addFile",
    "d": "addDirectory",
    "r": "rename",

    ".": "toggleHidden",
    "U": "refresh",

    "?": "help",
    "X": "systemExecute",
    "gd": "listDrive",

    "f": "search",
    "F": "searchRecursive",

    "gf": "gotoSource:file",
    "gb": "gotoSource:buffer",

    "[[": "sourcePrev",
    "]]": "sourceNext",

    "[d": "diagnosticPrev",
    "]d": "diagnosticNext",

    "[c": "gitPrev",
    "]c": "gitNext",
    ">>": "gitStage",
    "<<": "gitUnstage"
  },

  "git.enableGutters": false, // Use gitgutter instead.
  // "git.realtimeGutters": false, // false: update only on saving buffer.
  //"git.addGBlameToVirtualText": true,
  //// b:coc_git_blame will be created
  //"git.addGBlameToBufferVar": true,
  "git.virtualTextPrefix": " ",
  "git.semanticCommit.filetypes": ["gitcommit"],
  "git.showCommitInFloating": true, // or in popup

  // "prettier.semi": false, // semicolon after return, etc.
  "prettier.trailingComma": "es5",
  "prettier.singleQuote": true, // quotes other than jsx
  // "prettier.jsxSingleQuote": true,

  "tsserver.enableJavascript": true,

  "json.format.enable": false,

  "html.format.enable": false,

  // From: iamcco/coc-vimlsp
  "vimlsp.debug": false,
  "vimlsp.diagnostic.enable": true,
  "vimlsp.indexes.runtimepath": true,
  "vimlsp.indexes.count": 3,
  "vimlsp.indexes.gap": 500,
  "vimlsp.suggest.fromVimruntime": true,
  "vimlsp.suggest.fromRuntimepath": false,
  "vimlsp.trace.server": "verbose",

  "rust-analyzer.enableCargoWatchOnStartup": "enabled",
  "rust-analyzer.trace.cargo-watch": "verbose",
  "rust-analyzer.trace.server": "verbose",

  "python.formatting.provider": "yapf",
  //"python.formatting.yapfArgs": ["--style google"],
  // Use coc-pyright, too
  "python.linting.enabled": true,
  "python.linting.flake8Enabled": true,
  "python.linting.pylintEnabled": false,

  //"java.import.gradle.enabled": true,
  "java.import.maven.enabled": true,

  "java.errors.incompleteClasspath.severity": "ignore",
  "java.format.onType.fixComment.enabled": false,
  "java.configuration.updateBuildConfiguration": "automatic",
  //// 'if' with '{}'
  //"java.codeGeneration.useBlocks": true,
  //// add javadoc on method
  //"java.codeGeneration.generateComments": true,
  "java.format.settings.url": "/home/kaile256/.config/coc/extensions/node_modules/redhat.java/eclipse-formatter.xml",

  // vimspector through coc-java-debug
  // the adapter name in .vimspector.json
  "java.debug.vimspector.profile": "coc-java-debug",
  //"java.debug.vimspector.substitution.adapterPort": "AdapterPort",

  "languageserver": {
    "dls": {
      "command": "diagnostic-languageserver",
      "args": ["--stdio"],
      "filetypes": ["sh", "email", "dart"],
      "initializationOptions": {
        "linters": {
          "shellcheck": {
            // linter name, for example: vint
            "command": "shellcheck", // linter command
            "sourceName": "shellcheck",
            "debounce": 100, // debounce time
            "args": ["--format=gcc", "-"], // args
            "offsetLine": 0,
            "offsetColumn": 0,
            "formatLines": 1, // how much lines for formatPattern[0] to match
            "formatPattern": [
              "^[^:]+:(\\d+):(\\d+):\\s+([^:]+):\\s+(.*)$", // line match pattern (javascript regex)
              {
                "line": 1, // diagnostic line use match group 1
                "column": 2, // diagnostic column use match group 2
                "message": [4], // message to display use match group 4
                "security": 3 // security to use match group 3, ignore if linter do not support security
              }
            ],
            "securities": {
              // security keys, ignore if linter do not support security
              "error": "error", // [key: string]?: "error" | "warning" | "info" | "hint"
              "warning": "warning",
              "note": "info"
            }
          },
          //"vint": {
          //  "command": "vint",
          //  "sourceName": "vint",
          //  "debounce": 200,
          //  "args": ["--warning", "--neovim-enable"]
          //},
          "languagetool": {
            "command": "languagetool",
            "sourceName": "languagetool",
            "debounce": 200,
            "args": ["-"],
            "offsetLine": 0,
            "offsetColumn": 0,
            "formatLines": 2,
            "formatPattern": [
              "^\\d+?\\.\\)\\s+Line\\s+(\\d+),\\s+column\\s+(\\d+),\\s+([^\\n]+)\nMessage:\\s+(.*)$",
              {
                "line": 1,
                "column": 2,
                "message": [4, 3]
              }
            ]
          }
        },
        "filetypes": {
          "email": "languagetool",
          "markdown": ["write-good", "markdownlint"],
          "sh": "shellcheck",
          "elixir": ["mix_credo", "mix_credo_compile"]
          //"php": "phpcs"
          //"vim": "vint"
        },
        "formatters": {
          "commad": "dartfmt",
          "args": ["--fix"]
        },
        "formatFiletypes": {
          "dart": "dartfmt"
        }
      }
    },
    "bash": {
      "command": "bash-language-server",
      "args": ["start"],
      "filetypes": ["sh", "bash"],
      "ignoredRootPaths": []
    },
    "golang": {
      "command": "gopls",
      "rootPatterns": ["go.mod"],
      "filetypes": ["go"],
      "initializationOptions": {
        "diagnosticsEnabled": true,
        "lintTool": "golint",
        "formatTool": "gofumpt",
        "formatFlags": ["-w"]
      }
    },
    "ccls": {
      // See more detail in MaskRay/ccls/wiki/LSP-Extensions
      "command": "ccls",
      "filetypes": ["c", "cpp", "objc", "objcpp", "arduino"],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls-cache"
        },
        "cacheFormat": "json",
        "client": {
          "snippetSupport": true
        },
        "clang": {
          "resourceDir": "/usr/lib/clang/10.0.0"
        }
        // highlight by jackguo380/vim-lsp-cxx-highlight; incomplete
        //"highlight": { "lsRanges": true }
      }
    },
    //"cquery": {
    //  "command": "cquery",
    //  "args": ["--log-file=/tmp/cq.log"],
    //  "filetypes": ["c", "cpp"],
    //  "rootPatterns": [
    //    "compile_flags.txt",
    //    "compile_commands.json",
    //    ".vim/",
    //    ".git/",
    //    ".hg/"
    //  ],
    //  "initializationOptions": {
    //    "cacheDirectory": "/tmp/cquery",
    //    "highlight": { "enabled": true },
    //    "emitInactiveRegions": true
    //  }
    //},
    "intelephense": {
      "command": "intelephense",
      "args": ["--stdio"],
      "filetypes": ["php"],
      "initializationOptions": {
        "storagePath": "/tmp/intelephense"
      }
    },
    "clojure": {
      "command": "bash",
      "args": ["-c", "clojure-lsp"],
      "filetypes": ["clojure"],
      "rootPatterns": ["project.clj"],
      "additionalSchemes": ["jar", "zipfile"],
      "trace.server": "verbose",
      "initializationOptions": {}
    },
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": ["dockerfile"],
      "args": ["--stdio"]
    },
    "lua": {
      "command": "lua-lsp",
      "filetypes": ["lua"],
      "initializationOptions": {
        "formatTool": "lcf"
      }
    },
    "metals": {
      "command": "metals-vim",
      "rootPatterns": ["build.sbt"],
      "filetypes": ["scala", "sbt"]
    },
    "haskell": {
      "command": "hie-wrapper",
      "rootPatterns": [".stack.yaml", "cabal.config", "package.yaml"],
      "filetypes": ["hs", "lhs", "haskell"],
      "initializationOptions": {
        "languageServerHaskell": {
          // Not a typo of either hintOn or lintOn
          "hlintOn": true
        }
      }
    }
  }
}
