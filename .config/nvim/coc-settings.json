{
  "coc.preferences.extensionUpdateCheck": "weekly",
  "coc.preferences.formatOnType": true,
  "coc.preferences.formatOnSaveFiletypes": ["css", "Markdown"],
  "coc.preferences.snippets.enable": false,
  "coc.preferences.rootPatterns": [
    ".vim",
    ".git",
    ".hg",
    ".projections.json",
    "dotfiles"
  ],

  // see 'source' in coc-list
  "coc.source.tag.enable": false,
  "coc.source.emoji.filetypes": ["markdown", "config", "dosini"],
  // source.issues depends on coc-git
  "coc.source.issues.priority": 10,
  "coc.source.issues.filetypes": ["gitcommit"],

  "signature.preferShownAbove": false,
  "signature.triggerSignatureWait": 300,

  "suggest.minTriggerInputLength": 2,
  "suggest.autoTrigger": "always",
  "suggest.acceptSuggestionOnCommitCharacter": true,
  "suggest.enablePreview": false,
  "suggest.floatEnable": true,
  "suggest.noselect": true,
  "suggest.timeout": 500,
  "suggest.triggerAfterInsertEnter": false,
  "suggest.triggerCompletionWait": 200,
  "suggest.completionItemKindLabels": {
    "keyword": "\uf1de",
    "variable": "\ue79b",
    "value": "\uf89f",
    "operator": "\u03a8",
    "function": "\u0192",
    "reference": "\ufa46",
    "constant": "\uf8fe",
    "method": "\uf09a",
    "struct": "\ufb44",
    "class": "\uf0e8",
    "interface": "\uf417",
    "text": "\ue612",
    "enum": "\uf435",
    "enumMember": "\uf02b",
    "module": "\uf40d",
    "color": "\ue22b",
    "property": "\ue624",
    "field": "\uf9be",
    "unit": "\uf475",
    "event": "\ufacd",
    "file": "\uf723",
    "folder": "\uf114",
    "snippet": "\ue60b",
    "typeParameter": "\uf728",
    "default": "\uf29c"
  },

  "codeLens.enable": true,

  //"diagnostic.refreshAfterSave": true,
  //"diagnostic.checkCurrentLine": true,
  //"diagnostic.virtualText": true,

  "session.directory": "~/.local/share/nvim/session/",

  "list.autoResize": false,
  "list.maxPreviewHeight": 25,
  "list.source.mru.maxLength": 50,
  "list.source.mru.ignoreGitIgnore": false,
  "list.source.grep.defaultArgs": ["--regex"],
  "list.insertMappings": {
    "<C-t>": "action:tabe",
    "<C-s>": "action:split",
    "<C-v>": "action:vsplit",
    "<CR>": "action:drop",
    "<C-r>": "eval:@@",
    "<c-c>": "do:cancel",
    "<a-h>": "do:cancel",
    "<a-j>": "do:cancel",
    "<a-k>": "do:cancel",
    "<a-l>": "do:cancel",
    "<c-r>": "prompt.paste",
    "<c-a>": "prompt.start",
    "<c-e>": "prompt.end",
    "<c-f>": "prompt.right",
    "<c-b>": "prompt.left",
    "<c-d>": "prompt.deletebackward"
  },
  "list.normalMappings": {
    "m": "do.toggle",
    "d": "action:delete",
    "e": "action:drop",
    "<c-t>": "action:tab",
    "<c-v>": "action:vsplit",
    "<c-s>": "action:split"
  },

  "project.dbpath": "~/.coc-project",

  "yank.highlight.enable": true,
  "yank.enableCompletion": false,
  "yank.list.maxsize": 150,
  "yank.limit": 50,

  //"highlight.disableLanguages": [""],
  // too many memory would be used
  "highlight.document.enable": false,
  "highlight.colors.enable": true,

  "translator.engines": ["google"],
  "translator.toLang": "en",
  "translator.maxsize": 200,

  "explorer.keyMappings": {
    "k": "nodePrev",
    "j": "nodeNext",

    "*": "toggleSelection",
    "<tab>": "actionMenu",

    "h": "collapse",
    "l": "expand",
    "J": ["toggleSelection", "normal:j"],
    "K": ["toggleSelection", "normal:k"],
    "gl": "expandRecursive",
    "gh": "collapseRecursive",
    "o": "expandOrCollapse",
    "<cr>": "open",
    "e": "open",
    "E": "openInVsplit",
    "t": "openInTab",
    "<bs>": "gotoParent",

    "y": "copyFilepath",
    "Y": "copyFilename",
    "c": "copyFile",
    "x": "cutFile",
    "p": "pasteFile",
    "d": "delete",
    "D": "deleteForever",

    "a": "addFile",
    "A": "addDirectory",
    "r": "rename",

    ".": "toggleHidden",
    "R": "refresh",

    "?": "help",
    "q": "quit",
    "X": "systemExecute",
    "gd": "listDrive",

    "f": "search",
    "F": "searchRecursive",

    "gf": "gotoSource:file",
    "gb": "gotoSource:buffer",

    "[[": "sourcePrev",
    "]]": "sourceNext",

    "[d": "diagnosticPrev",
    "]d": "diagnosticNext",

    "[c": "gitPrev",
    "]c": "gitNext",
    "<<": "gitStage",
    ">>": "gitUnstage"
  },

  // false: update only on saving buffer.
  //"git.realtimeGutters": false,
  //"git.addGBlameToVirtualText": true,
  //// b:coc_git_blame will be created
  //"git.addGBlameToBufferVar", true,
  "git.virtualTextPrefix": " ",
  "git.semanticCommit.filetypes": ["gitcommit"],

  "prettier.trailingComma": "es5",

  "json.format.enable": false,

  // From: iamcco/coc-vimlsp
  "vimlsp.debug": false,
  "vimlsp.diagnostic.enable": true,
  "vimlsp.indexes.runtimepath": true,
  "vimlsp.indexes.count": 3,
  "vimlsp.indexes.gap": 100,
  "vimlsp.suggest.fromVimruntime": true,
  "vimlsp.suggest.fromRuntimepath": false,
  "vimlsp.trace.server": "verbose",

  "rust-analyzer.enableCargoWatchOnStartup": "enabled",
  "rust-analyzer.trace.cargo-watch": "verbose",
  "rust-analyzer.trace.server": "verbose",

  "python.formatting.provider": "yapf",
  "python.formatting.yapfArgs": ["--style google"],
  "python.linting.enabled": true,
  "python.linting.pylintEnabled": false,
  "python.linting.flake8Enabled": false,
  "python.linting.mypyEnabled": true,

  "languageserver": {
    "dls": {
      "command": "diagnostic-languageserver",
      "args": ["--stdio"],
      "filetypes": ["sh", "email", "dart"],
      "initializationOptions": {
        "linters": {
          "shellcheck": {
            // linter name, for example: vint
            "command": "shellcheck", // linter command
            "sourceName": "shellcheck",
            "debounce": 100, // debounce time
            "args": ["--format=gcc", "-"], // args
            "offsetLine": 0,
            "offsetColumn": 0,
            "formatLines": 1, // how much lines for formatPattern[0] to match
            "formatPattern": [
              "^[^:]+:(\\d+):(\\d+):\\s+([^:]+):\\s+(.*)$", // line match pattern (javascript regex)
              {
                "line": 1, // diagnostic line use match group 1
                "column": 2, // diagnostic column use match group 2
                "message": [4], // message to display use match group 4
                "security": 3 // security to use match group 3, ignore if linter do not support security
              }
            ],
            "securities": {
              // security keys, ignore if linter do not support security
              "error": "error", // [key: string]?: "error" | "warning" | "info" | "hint"
              "warning": "warning",
              "note": "info"
            }
          },
          "vint": {
            "command": "vint",
            "sourceName": "vint",
            "debounce": 200,
            "args": ["--neovim-enable", "-"]
          },
          "languagetool": {
            "command": "languagetool",
            "sourceName": "languagetool",
            "debounce": 200,
            "args": ["-"],
            "offsetLine": 0,
            "offsetColumn": 0,
            "formatLines": 2,
            "formatPattern": [
              "^\\d+?\\.\\)\\s+Line\\s+(\\d+),\\s+column\\s+(\\d+),\\s+([^\\n]+)\nMessage:\\s+(.*)$",
              {
                "line": 1,
                "column": 2,
                "message": [4, 3]
              }
            ]
          }
        },
        "filetypes": {
          "email": "languagetool",
          "markdown": ["write-good", "markdownlint"],
          "sh": "shellcheck",
          "elixir": ["mix_credo", "mix_credo_compile"],
          "eelixir": ["mix_credo", "mix_credo_compile"],
          "php": "phpcs",
          "vim": "vint"
        },
        "formatters": {
          "commad": "dartfmt",
          "args": ["--fix"]
        },
        "formatFiletypes": {
          "dart": "dartfmt"
        }
      }
    },
    "bash": {
      "command": "bash-language-server",
      "args": ["start"],
      "filetypes": ["sh", "bash"],
      "ignoredRootPaths": []
    },
    "golang": {
      "command": "gopls",
      "rootPatterns": ["go.mod"],
      "filetypes": ["go"],
      "initializationOptions": {
        "diagnositicsEnabled": true,
        "lintTool": "golint",
        "formatTool": "gofumpt",
        "formatFlags": ["-w"]
      }
    },
    "ccls": {
      // See more detail in MaskRay/ccls/wiki/LSP-Extensions
      "command": "ccls",
      "filetypes": ["c", "cpp", "objc", "objcpp"],
      "rootPatterns": [
        ".ccls",
        "compile_commands.json",
        ".vim/",
        ".git/",
        ".hg/"
      ],
      "initializationOptions": {
        "cache": {
          "directory": "/tmp/ccls"
        },
        // highlight by jackguo380/vim-lsp-cxx-highlight
        "highlight": { "lsRanges": true }
      }
    },
    //"cquery": {
    //  "command": "cquery",
    //  "args": ["--log-file=/tmp/cq.log"],
    //  "filetypes": ["c", "cpp"],
    //  "rootPatterns": [
    //    "compile_flags.txt",
    //    "compile_commands.json",
    //    ".vim/",
    //    ".git/",
    //    ".hg/"
    //  ],
    //  "initializationOptions": {
    //    "cacheDirectory": "/tmp/cquery",
    //    "highlight": { "enabled": true },
    //    "emitInactiveRegions": true
    //  }
    //},
    "intelphense": {
      "command": "intelphense",
      "args": ["--stdio"],
      "filetypes": ["php"],
      "initializationOptions": {
        "storagePath": "/tmp/intelphense"
      }
    },
    "clojure": {
      "command": "bash",
      "args": ["-c", "clojure-lsp"],
      "filetypes": ["clojure"],
      "rootPatterns": ["project.clj"],
      "additionalSchemes": ["jar", "zipfile"],
      "trace.server": "verbose",
      "initializationOptions": {}
    },
    "dockerfile": {
      "command": "docker-langserver",
      "filetypes": ["dockerfile"],
      "args": ["--stdio"]
    },
    "lua": {
      "command": "lua-lsp",
      "filetypes": ["lua"],
      "initializationOptions": {
        "formatTool": "lcf"
      }
    },
    "metals": {
      "command": "metals-vim",
      "rootPatterns": ["build.sbt"],
      "filetypes": ["scala", "sbt"]
    },
    "haskell": {
      "command": "hie-wrapper",
      "rootPatterns": [".stack.yaml", "cabal.config", "package.yaml"],
      "filetypes": ["hs", "lhs", "haskell"],
      "initializationOptions": {
        "languageServerHaskell": {
          "hlintOn": true
        }
      }
    }
  }
}
