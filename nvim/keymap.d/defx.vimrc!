"""" TODO
"" show sym-links.
command! -nargs=* -range -bar -complete=customlist,defx#util#complete
      \ Defx
      \ call defx#util#call_defx('Defx', <q-args>)

"""" Shortcut
""" Defx Style
" edit-style: prefix-e adjust cloumn.
let eDefx = Defx
" tabe-style
"let bDefx = tabe<cr>:Defx
" sp-style: show multiple columns. TODO
let sDefx = 'Defx -split=horizontal -winhight=50 -direction=topleft'
" vs-style: show like a sidebar.
let g:vDefx = 'Defx -split=vertical -winwidth=40 -direction=topleft'
" open-style: keep sidebar-like style.
let oDefx = 'Defx -split=vertical -winwidth=40 -direction=topleft'

"" Preceding Tree
nmap <silent> <space>- :<c-u>g:vDefx `expand('%:p:h')` -search=`expand('%:p')`<cr>
"" Optional
nmap <silent> <space><space>e :eDefx 
nmap <silent> <space><space>b :bDefx 
nmap <silent> <space><space>s :sDefx 
nmap <silent> <space><space>v :<c-u>vDefx 
"" Home
nmap <silent> <space>he :eDefx ~<cr>
nmap <silent> <space>hb :bDefx ~<cr>
nmap <silent> <space>hv :<c-u>g:vDefx ~<cr>
nmap <silent> <space>hs :sDefx ~<cr>
"" Current File
nmap <silent> <space>.e :eDefx .<cr>
nmap <silent> <space>.b :bDefx .<cr>
nmap <silent> <space>.v :<c-u>vDefx .<cr>
nmap <silent> <space>.s :Defx .<cr>

""" Praticular Dirs.
let g:dotfiles_dir = '~/dotfiles'
let g:nvim_dir     = g:dotfiles . '/nvim'
let g:keymap_dir   = g:nvim_dir . '/keymap.d'
let g:plugins_dir  = g:nvim_dir . '/dein_toml.d'
let g:note_dir     = '~/CloudNote'

"" Dotfiles
nmap <silent> <space>de :eDefx g:dotfiles_dir<cr>
nmap <silent> <space>db :bDefx g:dotfiles_dir<cr>
nmap <silent> <space>dv :<c-u>vDefx g:dotfiles_dir<cr>
nmap <silent> <space>ds :sDefx g:dotfiles_dir<cr>
"" Config
nmap <silent> <space>ce :eDefx g:nvim_dir<CR>
nmap <silent> <space>cs :sDefx g:nvim_dir<CR>
nmap <silent> <space>cv :<c-u>vDefx g:nvim_dir<CR>
nmap <silent> <space>cb :bDefx g:nvim_dir<CR>
"" Keymapping
nmap <silent> <space>ke :eDefx g:keymap_dir<CR>
nmap <silent> <space>ks :sDefx g:keymap_dir<CR>
nmap <silent> <space>kv :<c-u>vDefx g:keymap_dir<CR>
nmap <silent> <space>kb :bDefx g:keymap_dir<CR>
"" Plugins list: dein's toml
nmap <silent> <space>pe :eDefx g:plugins_dir<CR>
nmap <silent> <space>ps :sDefx g:plugins_dir<CR>
nmap <silent> <space>pv :<c-u>vDefx g:plugins_dir<CR>
nmap <silent> <space>pb :bDefx g:plugins_dir<CR>
"" Stand-by a CloudNote
nmap <silent> <space>ne :eDefx g:note_dir
nmap <silent> <space>ns :sDefx g:note_dir
nmap <silent> <space>nv :<c-u>vDefx g:note_dir
nmap <silent> <space>nb :bDefx g:note_dir

"""" Keybinds only on Defx
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')

  """ Explore Tree
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> f
        \ defx#do_action('search')
  "" hjkl
  " h:back on tree
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open', 'vsplit')
  "" netrw-like
  nnoremap <silent><buffer><expr> -
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> m
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> v
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> o
        \ defx#do_action('open', 'split')
  nnoremap <silent><buffer><expr> p
        \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> u
        \ defx#do_action('open_or_close_tree')

 """ File-Management
  " Clipboard
  " show the path under cursor on status-bar.
  nnoremap <silent><buffer><expr> mc
        \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> mm
        \ defx#do_action('move')
  nnoremap <silent><buffer><expr> mp
        \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> yy
        \ defx#do_action('yank_path')
  "" Select
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  " reverse all select conditions.
  nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
  " netrw-like
  nnoremap <silent><buffer><expr> c
        \ defx#do_action('change_vim_cwd')
  nnoremap <silent><buffer><expr> D
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> R
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> %
        \ defx#do_action('new_file')

  nnoremap <silent><buffer><expr> !
        \ defx#do_action('execute_system')

  """ Toggle
  "" Ignored/Hidden File\
  nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
  
  "" Sort
  nnoremap <silent><buffer><expr> st
        \ defx#do_action('toggle_sort', 'time')
  nnoremap <silent><buffer><expr> sz
        \ defx#do_action('toggle_sort', 'size')
  nnoremap <silent><buffer><expr> sx
        \ defx#do_action('toggle_sort', 'extention')
  nnoremap <silent><buffer><expr> sn
        \ defx#do_action('toggle_sort', 'filename')

endfunction
